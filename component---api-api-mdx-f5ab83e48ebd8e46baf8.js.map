{"version":3,"sources":["webpack:///../gifs/validate-field.gif","webpack:///../gifs/async-validator.gif","webpack:///../api/api.mdx","webpack:///../gifs/pattern.gif","webpack:///../gifs/max-length.gif","webpack:///../gifs/email.gif","webpack:///../gifs/record-validator.gif","webpack:///../gifs/required.gif","webpack:///../gifs/min-length.gif","webpack:///../gifs/field-validator.gif"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---api-api-mdx-f5ab83e48ebd8e46baf8.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/validate-field-300ebc8e4a500a9c58e8e7b07d4f331f.gif\";","module.exports = __webpack_public_path__ + \"static/async-validator-04bec2a4817d277fbe5059a6a969ee82.gif\";","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h1>\n    <p>{`This section documents the complete `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk\"\n      }}>{`fonk`}</a>{` API. Keep in mind that `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk\"\n      }}>{`fonk`}</a>{` is only concerned with managing validations in Vanilla JavaScript.`}</p>\n    <p>{`In a real app, you'll also want to use some integration library like `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/react-final-form\"\n      }}>{`react-final-form`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"validation-schema-definition\"\n    }}>{`Validation Schema definition`}</h2>\n    <h3 {...{\n      \"id\": \"validationschema\"\n    }}>{`ValidationSchema`}</h3>\n    <p>{`In this structure you can define all the validations associated to a given form (field and record validations).`}</p>\n    <p>{`This allow us to define all validation associated to a given form in a declarative way.`}</p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`field`}</strong>{`: optional entry, here you can define all field validations associated to a given form\n(see `}<a parentName=\"p\" {...{\n            \"href\": \"/fonk-doc/api#fieldvalidationschema\"\n          }}>{`FieldValidationSchema`}</a>{` for more information).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`record`}</strong>{`: optional entry, here you can define all record validations associated to a given form\n(see `}<a parentName=\"p\" {...{\n            \"href\": \"/fonk-doc/api#recordvalidationschema\"\n          }}>{`RecordValidationSchema`}</a>{` for more information).`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface ValidationSchema {\n  field?: FieldValidationSchema;\n  record?: RecordValidationSchema;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fieldvalidationschema\"\n    }}>{`FieldValidationSchema`}</h3>\n    <p>{`In this structure you can define all field validations associated to a given form. For each field, it has to add a validator list.\nEach validator could be a `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#field-synchronous-validator\"\n      }}>{`field sync validator`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#field-asynchronous-validator\"\n      }}>{`field async validator`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#fullfieldvalidation\"\n      }}>{`full field validation`}</a></p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`field name`}</strong>{`: Field name which it wants to apply the validator`}</li>\n    </ul>\n    <p>{`Values:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An array of `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#field-synchronous-validator\"\n        }}>{`field sync validator`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#field-asynchronous-validator\"\n        }}>{`field async validator`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fullfieldvalidation\"\n        }}>{`full field validation`}</a></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const validationSchema: ValidationSchema = {\n  field: {\n    myFieldName: [\n      Validators.required, // This is a sync validator\n      loginValidator, // This is a custom async validator\n      {\n        validator: Validators.required, // This is a sync validator\n        customArgs: { otherField: 'other' },\n        message: 'Required field',\n      },\n      {\n        validator: loginValidator, // This is a custom async validator\n        customArgs: { otherField: 'other' },\n        message: 'Invalid login',\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"fullfieldvalidation\"\n    }}>{`FullFieldValidation`}</h4>\n    <p>{`Structure to define a field validation:`}</p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`validator`}</strong>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#field-asynchronous-validator\"\n        }}>{`field async validator`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#field-synchronous-validator\"\n        }}>{`field sync validator`}</a>{` validation function to apply. As syntactic sugar, you could provide an object with `}<inlineCode parentName=\"li\">{`validator`}</inlineCode>{` property.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`customArgs`}</strong>{`: optional, here you can pass any additional configuration, needed to setup the validator (e.g. in a max-length validation the length value, or in a regEx validator the regEx pattern).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: optional, in this parameter you can override the default message(s) that the validator generates.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"examples\"\n    }}>{`Examples:`}</h4>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/field-validator\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/field-validator\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Schema Field validations`}</strong></p>\n    <p>{`Let's say we want to build a Login Form, and it contains the following record:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const loginModel = {\n  user: '',\n  password: '',\n};\n`}</code></pre>\n    <p>{`We want to validate that both user and password are required field, a validation\nschema to define these validations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst loginFormValidationSchema = {\n  field: {\n    user: [Validators.required],\n    password: [Validators.required],\n  },\n};\n`}</code></pre>\n    <p>{`Let's follow up completing this form validation, in this case it wants to ensure\nthat the user field is required and a well formed email address:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst loginFormValidationSchema = {\n  field: {\n    user: [Validators.required, Validators.email],\n    password: [Validators.required],\n  },\n};\n`}</code></pre>\n    <p>{`Let's add one more step of complexity in this case it wants to ensure that\nthe password field name is at least 5 characters length, it can use the\nmin-length validator, but it has to feed and additional parameter to\nindicate the minumum length, in this case the validation schema accepts\nboth function and structure based definition to include validation it will\nuse the second option.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst loginFormValidationSchema = {\n  field: {\n    user: [Validators.required, Validators.email],\n    password: [\n      Validators.required,\n      {\n        validator: Validators.minLength,\n        customArgs: { length: 3 },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"field-validator\" src={require(\"../gifs/field-validator.gif\")} /></p>\n    <h3 {...{\n      \"id\": \"recordvalidationschema\"\n    }}>{`RecordValidationSchema`}</h3>\n    <p>{`In this structure you can define all record validations associated to a given form. For each record, it has to add a validator list.\nEach validator could be a `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#record-synchronous-validator\"\n      }}>{`record sync validator`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#record-asynchronous-validator\"\n      }}>{`record async validator`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#fullrecordvalidation\"\n      }}>{`full record validation`}</a></p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`record name`}</strong>{`: Record name which it wants to apply the validator`}</li>\n    </ul>\n    <p>{`Values:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An array of `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#record-synchronous-validator\"\n        }}>{`record sync validator`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#record-asynchronous-validator\"\n        }}>{`record async validator`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fullrecordvalidation\"\n        }}>{`full record validation`}</a></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const validationSchema: ValidationSchema = {\n  record: {\n    myRecordName: [\n      freeShippingAllowed, // This is a custom sync validator\n      asyncFreeShippingAllowed, // This is a custom async validator\n      {\n        validator: freeShippingAllowed, // This is a sync validator\n        message: 'Total must be greater than 30USD',\n      },\n      {\n        validator: asyncFreeShippingAllowed, // This is a custom async validator\n        message: 'Total must be greater than 60USD',\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"fullrecordvalidation\"\n    }}>{`FullRecordValidation`}</h4>\n    <p>{`Structure to define a record validation:`}</p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`validator`}</strong>{`: `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#record-asynchronous-validator\"\n        }}>{`record async validator`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fullrecordvalidation\"\n        }}>{`full record validation`}</a>{` validation function to apply.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: optional, in this parameter you can override the default message(s) that the validator generates.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples:`}</h4>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/record-validator\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/record-validator\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Record Field validations`}</strong></p>\n    <p>{`Sometimes you need to create global validation that is not tied up to a specific field, or\nyou want it to be fired once the user has fullfilled all the data in the validation form, a\nuse case for this type of validation could be: shopping cart checkout, offer free shipping\nif total amount (including discount) is greater than 30 USD`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const checkoutForm = {\n  subtotal: 0,\n  discount: 0,\n};\n`}</code></pre>\n    <p>{`Let's define our record validator rule:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const freeShippingAllowed = ({ values }) => {\n  const succeeded = values.subtotal - values.discount >= 30;\n  return {\n    type: 'RECORD_FREE_SHIPPING',\n    succeeded,\n    message: succeeded\n      ? ''\n      : 'Total must be greater than 30USD to get cost free shippings',\n  };\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validationSchema = {\n  record: {\n    freeShippingValidation: [freeShippingAllowed],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"record-validator\" src={require(\"../gifs/record-validator.gif\")} /></p>\n    <h2 {...{\n      \"id\": \"createformvalidation\"\n    }}>{`createFormValidation`}</h2>\n    <p>{`Factory method creates a new `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#formvalidation\"\n      }}>{`FormValidation`}</a>{`. This is the main entry point when creating FormValidations`}</p>\n    <p>{`Arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationschema\"\n        }}><strong parentName=\"a\">{`ValidationSchema`}</strong></a>{`: validations associated to a given form (field and record validations)\n`}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationschema\"\n        }}>{`ValidationSchema`}</a></li>\n    </ul>\n    <p>{`Returned Value`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#formvalidation\"\n        }}><strong parentName=\"a\">{`FormValidation`}</strong></a>{`: a FormValidation instance to fire validations. See `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#formvalidation\"\n        }}><strong parentName=\"a\">{`FormValidation`}</strong></a>{` for more information.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const validationSchema: ValidationSchema = {\n  // Your validation schema\n};\nconst formValidation: FormValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"formvalidation\"\n    }}>{`FormValidation`}</h3>\n    <p>{`This is the main class you will interact with when validating forms, it allows you to inform the form validation\nschema in the constructor of the class, then it exposes methods to fire `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validatefield\"\n      }}>{`validateField`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validaterecord\"\n      }}>{`validateRecord`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validateform\"\n      }}>{`validateForm`}</a>{` (fire all field plus record validations).`}</p>\n    <h4 {...{\n      \"id\": \"constructor\"\n    }}>{`Constructor`}</h4>\n    <p>{`In order to instantiate the class it needs to inform a `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validationschema\"\n      }}>{`ValidationSchema`}</a>{`, internally\nthe constructor will traverse the validation schema and categorize field and record validations.`}</p>\n    <p>{`Arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`validatonSchema`}</strong>{`: The form `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationschema\"\n        }}>{`ValidationSchema`}</a></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`  constructor(validationSchema: ValidationSchema) {\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"validatefield\"\n    }}>{`ValidateField`}</h4>\n    <p>{`Allows us to fire all the validations associated to given field, this method is async and it returns a promise with a `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validationresult\"\n      }}>{`validation result`}</a>{`.`}</p>\n    <p>{`How does it works:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It starts iterating over all the associated fields that have validations defined in the `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationschema\"\n        }}>{`ValidationSchema`}</a>{`:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`The validation engine will start sequentially firing the list of validations associated to that field in the form validation schema.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`It will stop iterating through all validations associated to the given field:\nA. When it finds a validation that fails, in that case it will indicate that the field validation failed, which validation failed, plus the error message associated.\nB. When all associated fields validations succeeded, in that case it will return a succeeded validation result.`}</li>\n    </ul>\n    <p>{`Arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`fieldId`}</strong>{`: name of the field to be validated (e.g. run all the validation associated to the form password field).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`value`}</strong>{`: current value of the field.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: optional argument. All form values (e.g. in a login form, values would be username and password fields).`}</li>\n    </ul>\n    <p>{`Returns:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationresult\"\n        }}><strong parentName=\"a\">{`Promise<ValidationResult`}{`>`}</strong></a>{`: Result of firing all the field validations.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public validateField(fieldId: string, value: any, values?: any): Promise<ValidationResult>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"validaterecord\"\n    }}>{`ValidateRecord`}</h4>\n    <p>{`Allows us to fire all record validations associated to the form, this method is async returns a promise with a RecordValidation result.`}</p>\n    <p>{`How does it works:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It passes as arguments the whole form information (aka. record or values).`}</li>\n      <li parentName=\"ul\">{`The validation engine will start sequentially firing the list record validations associated to the form.`}</li>\n      <li parentName=\"ul\">{`For each record, it will fire related validations and stop it:\nA. When it finds a validation that fails, in that case it will indicate that the record validation failed, which validation failed, plus the error message associated.\nB. When all associated record validations succeed, in that case it will return a validation succeed result.`}</li>\n    </ul>\n    <p>{`Arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: All form values (e.g. in a login form, values would be username and password fields).`}</li>\n    </ul>\n    <p>{`Returns:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#recordvalidationresult\"\n        }}><strong parentName=\"a\">{`Promise<RecordValidationResult`}{`>`}</strong></a>{`: Result of firing all the record validations.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`public validateRecord(values?: any): Promise<RecordValidationResult>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"validateform\"\n    }}>{`ValidateForm`}</h4>\n    <p>{`Fires all fields and record validations in one go, how does it work:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Starts iterating over all the associated fields that have validations defined in the ValidationSchema:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`The validation engine will start sequentially firing the list of validations associated to each field in the form validation schema.`}</li>\n          <li parentName=\"ul\">{`It will stop iterating through all validations associated to each field as same way as `}<a parentName=\"li\" {...{\n              \"href\": \"/fonk-doc/api#validatefield\"\n            }}>{`validateField`}</a>{`.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Then, it starts iterating sequentially firing the list of validations associated to each record and it will stop as same way as `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validaterecord\"\n        }}>{`validateRecord`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Once the engine it's done with all fields and records validations it returns the whole result, grouped in two areas:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`An Object containing two keys:`}<ul parentName=\"li\">\n              <li parentName=\"ul\">{`'fieldErrors': contains an object fieldId/ValidationResult.`}</li>\n              <li parentName=\"ul\">{`'recordErrors': contains an object with recordId/ValidationResult.`}</li>\n            </ul></li>\n        </ul></li>\n    </ul>\n    <p>{`Arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: all form values (e.g. in a login form, values would be username and password fields).`}</li>\n    </ul>\n    <p>{`Returns:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#formvalidationresult\"\n        }}><strong parentName=\"a\">{`Promise<FormValidationResult`}{`>`}</strong></a>{`: Result of firing all the field and record validation results.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`validateForm(values: any): Promise<FormValidationResult>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validaton-result-structures\"\n    }}>{`Validaton Result structures`}</h2>\n    <h3 {...{\n      \"id\": \"validationresult\"\n    }}>{`ValidationResult`}</h3>\n    <p>{`A field or record validation function will return a\n`}<em parentName=\"p\">{`ValidationResult`}</em></p>\n    <p>{`Properties`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`type`}</strong>{`: Validator applied (e.g. required, email, min-length...).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`succeeded`}</strong>{`: Whether if the validation succeeded (true) or failed (false).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: Error message. Empty if all the validations evaluated succeeded.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string | string[];\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"recordvalidationresult\"\n    }}>{`RecordValidationResult`}</h3>\n    <p>{`Whenever we validate all form record entries (`}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validaterecord\"\n      }}>{`ValidateRecord`}</a>{`), a `}<em parentName=\"p\">{`RecordValidationResult`}</em>{` is returned.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`succeeded`}</strong>{`: Whether if the record validations succeeded (true) or failed (false).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`recordErrors`}</strong>{`: collection of validation results grouped by recordId.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface RecordValidationResult {\n  succeeded: boolean;\n  recordErrors: { [recordId: string]: ValidationResult };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"formvalidationresult\"\n    }}>{`FormValidationResult`}</h3>\n    <p>{`Whenever it validates a form with `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validateform\"\n      }}>{`ValidateForm`}</a>{` (trigger all field and record validations associated to that form) it will return a `}<em parentName=\"p\">{`FormValidationResult`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface FormValidationResult {\n  succeeded: boolean;\n  fieldErrors: { [fieldId: string]: ValidationResult };\n  recordErrors: { [recordId: string]: ValidationResult };\n}\n`}</code></pre>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`succeeded`}</strong>{`: Whether if all validations succeeded (true) or any of them failed (false).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`fieldErrors`}</strong>{`: Collection of field ValidationResults grouped by fieldId.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`recordErrors`}</strong>{`: Collections of record ValidationResults grouped by recordId.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"validators\"\n    }}>{`Validators`}</h2>\n    <h3 {...{\n      \"id\": \"fieldvalidation-function-type\"\n    }}>{`FieldValidation function type`}</h3>\n    <p>{`FieldValidation function type is the one used to define field validator functions (for instance a function\nthat validates if a field has been informed, or if it is a valid email). FieldValidation apply to a single field\nalthough is possible that a field validation could read values from another form field (for instance the field `}<em parentName=\"p\">{`PartnerId`}</em>{`\nis required only if the `}<em parentName=\"p\">{`isPartner`}</em>{` boolean value is true),`}</p>\n    <p>{`Field validator functions must comply with a given signature, in this case, it accepts\ntwo signatures, sync and async.`}</p>\n    <h4 {...{\n      \"id\": \"field-synchronous-validator\"\n    }}>{`Field Synchronous Validator`}</h4>\n    <p>{`Synchronous validator function.`}</p>\n    <p>{`Arguments`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fieldvalidationargs\"\n        }}><strong parentName=\"a\">{`FieldValidatorArgs`}</strong></a>{`: It passes here information like id of the field\nto validate, actual value, values and customArgs. See `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fieldvalidationargs\"\n        }}><strong parentName=\"a\">{`FieldValidatorArgs`}</strong></a>{`\nfor more information.`}</li>\n    </ul>\n    <p>{`Returned Value`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationresult\"\n        }}><strong parentName=\"a\">{`ValidationResult`}</strong></a>{`: Whether if field validations applied to the selected field\nsucceeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export type FieldValidationFunctionSync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => ValidationResult;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"field-asynchronous-validator\"\n    }}>{`Field Asynchronous Validator`}</h4>\n    <p>{`Asynchronous validator function.`}</p>\n    <p>{`Arguments`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fieldvalidationargs\"\n        }}><strong parentName=\"a\">{`FieldValidatorArgs`}</strong></a>{`: It passes here information like id of the field\nto validate, actual value, values and customArgs. See `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#fieldvalidationargs\"\n        }}><strong parentName=\"a\">{`FieldValidatorArgs`}</strong></a>{`\nfor more information.`}</li>\n    </ul>\n    <p>{`Returned Value`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationresult\"\n        }}><strong parentName=\"a\">{`Promise<ValidationResult`}{`>`}</strong></a>{`: Async promise. Once promise is resolved, it returns whether if field validations applied to the selected field succeeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export type FieldValidationFunctionAsync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => Promise<ValidationResult>;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"fieldvalidationargs\"\n    }}>{`FieldValidationArgs`}</h4>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#fieldvalidation-function-type\"\n      }}>{`FieldValidation`}</a>{` functions accept as input parameter a `}<em parentName=\"p\">{`FieldValidationArgs`}</em>{`,\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk\"\n      }}>{`fonk`}</a>{` engine will feed the needed properties to the validator when a field\nvalidation is fired.`}</p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`value`}</strong>{`: current value of the field to be evaluated.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: whole form values (all fields associated to the form).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`customArgs`}</strong>{`: if it need to pass any configuration parameter to the validator (for instance, in a\nmin-length validation the numeric value, or in a password matches another field the id of the field to compare against).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: you can override the default error(s) message generated by the validators and set your own (for instance\nin a regEx / pattern validation you may want to customize the error message for a credit card field to something like `}<em parentName=\"li\">{`this is not a\nvalid credit card number`}</em>{` instead of the generic `}<em parentName=\"li\">{`Pattern does not match`}</em>{`).`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface FieldValidatorArgs {\n  value: any;\n  values?: any;\n  customArgs?: any;\n  message?: string | string[];\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"recordvalidation-function-type\"\n    }}>{`RecordValidation function type`}</h3>\n    <p>{`RecordValidation function type is the one used to define record validator functions. What is a record validator function?\nThese validations are associated to the whole form instead of a single field, for instance: if the total amount\nof your shopping cart is more than 50 USD then you get free shipping, if not warn the user.`}</p>\n    <p>{`Field validator functions must comply with a given signature, in this case, it accepts\ntwo signatures, sync and async.`}</p>\n    <h4 {...{\n      \"id\": \"record-synchronous-validator\"\n    }}>{`Record Synchronous Validator`}</h4>\n    <p>{`Synchronous validator function.`}</p>\n    <p>{`Arguments`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#recordvalidatorargs\"\n        }}><strong parentName=\"a\">{`RecordValidatorArgs`}</strong></a>{`: It passes here information like values and message. See `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#recordvalidatorargs\"\n        }}><strong parentName=\"a\">{`RecordValidatorArgs`}</strong></a>{`\nfor more information.`}</li>\n    </ul>\n    <p>{`Returned Value`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationresult\"\n        }}><strong parentName=\"a\">{`ValidationResult`}</strong></a>{`: Whether if field validations applied to the selected field\nsucceeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export type RecordValidationFunctionSync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => ValidationResult;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"record-asynchronous-validator\"\n    }}>{`Record Asynchronous Validator`}</h4>\n    <p>{`Asynchronous validator function.`}</p>\n    <p>{`Arguments`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#recordvalidatorargs\"\n        }}><strong parentName=\"a\">{`RecordValidatorArgs`}</strong></a>{`: It passes here information like values and message. See `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#recordvalidatorargs\"\n        }}><strong parentName=\"a\">{`RecordValidatorArgs`}</strong></a>{` for more information.`}</li>\n    </ul>\n    <p>{`Returned Value`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationresult\"\n        }}><strong parentName=\"a\">{`Promise<ValidationResult`}{`>`}</strong></a>{`: Async promise. Once promise is resolved, it returns whether if field validations applied to the selected field succeeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export type RecordValidationFunctionAsync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => Promise<ValidationResult>;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"recordvalidationargs\"\n    }}>{`RecordValidationArgs`}</h4>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#recordvalidation-function-type\"\n      }}>{`RecordValidation`}</a>{` functions accept as input parameter a `}<em parentName=\"p\">{`RecordValidationArgs`}</em>{`,\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk\"\n      }}>{`fonk`}</a>{` engine will feed the needed properties to the validator when a record\nvalidation is fired.`}</p>\n    <p>{`Properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: whole form values (all fields associated to the form).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: you can override the default error(s) message generated by the record validators and set your own.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface RecordValidatorArgs {\n  values: any;\n  message?: string | string[];\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"built-in-validators\"\n    }}>{`Built in validators`}</h3>\n    <h5 {...{\n      \"id\": \"required\"\n    }}>{`required`}</h5>\n    <p>{`Succeeds if a field value is informed, fails if the field is not informed (null, undefined, or empty string).`}</p>\n    <p>{`Accepts a custom paramater to instruct the validator to trim the incoming values\n(if true a value like ' ' would be treated as an empty string).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface RequiredArgs {\n  trim: boolean; // Default value equals true\n}\n\nexport const required: FieldValidationFunctionSync<RequiredArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Simple, (trim default value equals true):`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    login: [Validators.required],\n  },\n};\n`}</code></pre>\n    <p>{`customArgs`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    login: [Validators.required],\n    password: [\n      {\n        validator: Validators.required,\n        customArgs: { trim: false },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <p><img alt=\"required\" src={require(\"../gifs/required.gif\")} /></p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/required\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/required\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"email\"\n    }}>{`email`}</h5>\n    <p>{`Succeeds if a field value is a well formed email, fails if not.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export const email: FieldValidationFunctionSync = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    email: [Validators.email],\n  },\n};\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <p><img alt=\"email\" src={require(\"../gifs/email.gif\")} /></p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/email\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/email\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"pattern\"\n    }}>{`pattern`}</h5>\n    <p>{`Succeeds if a field matches with a define regex, fails if not. This regular expression can be either a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\n      }}>{`RegExp`}</a>{` instance or a string.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <p>{`Is mandatory to pass the regEx expression to be evaluated.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface PatternArgs {\n  pattern: string | RegExp;\n}\n\nexport const pattern: FieldValidationFunctionSync<PatternArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <p>{`String:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: '^(7|8|9)\\\\\\\\d{9}$' },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Regex:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^(7|8|9)\\\\d{9}$/ },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Regex constructor:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: new RegExp(/^(7|8|9)\\\\d{9}$/) },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <p><img alt=\"pattern\" src={require(\"../gifs/pattern.gif\")} /></p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/pattern\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/pattern\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"min-length\"\n    }}>{`min-length`}</h5>\n    <p>{`Succeeds if a field length is greater than the one informed in the customArgs.length`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <p>{`Is mandatory to pass the min length value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface LengthArgs {\n  length: number;\n}\n\nexport const minLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Sample usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <p><img alt=\"min-length\" src={require(\"../gifs/min-length.gif\")} /></p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/min-length\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/min-length\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <h5 {...{\n      \"id\": \"max-length\"\n    }}>{`max-length`}</h5>\n    <p>{`Succeeds if a field length is less than the one informed in the customArgs.length`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <p>{`Is mandatory to pass the max length value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface LengthArgs {\n  length: number;\n}\n\nexport const maxLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Sample usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <p><img alt=\"max-length\" src={require(\"../gifs/max-length.gif\")} /></p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/max-length\"\n      }}>{`javascript example`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/max-length\"\n      }}>{`typescript example`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"third-party-validators\"\n    }}>{`Third party validators:`}</h4>\n    <p>{`Prior to create a custom validator, check out if there is already one implemented that covers the functionality you need.`}</p>\n    <p>{`You can find a list of validators in `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validators/third-party-validators\"\n      }}>{`third party validators`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"custom-validators\"\n    }}>{`Custom validators`}</h4>\n    <p>{`A custom validator is a function used for validate a field or record.`}</p>\n    <p>{`It could use `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#field-synchronous-validator\"\n      }}>{`Field Synchronous Validator`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#field-asynchronous-validator\"\n      }}>{`Field Asynchronous Validator`}</a>{` for fields and `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#record-synchronous-validator\"\n      }}>{`Record Synchronous Validator`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#record-asynchronous-validator\"\n      }}>{`Record Asynchronous Validator`}</a>{` for records.`}</p>\n    <p>{`You could see some examples creating custom validators in:`}</p>\n    <p><strong parentName=\"p\">{`Sync custom validators`}</strong></p>\n    <p><img alt=\"custom-validators\" src={require(\"../gifs/validate-field.gif\")} /></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/custom-validators\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/custom-validators\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/custom-validators\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/custom-validators\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Async custom validators`}</strong></p>\n    <p><img alt=\"async-validator\" src={require(\"../gifs/async-validator.gif\")} /></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/async-validator\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/async-validator\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/async-validator\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/async-validator\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/pattern-aafa785f6e9775b2f30e6c272cd56079.gif\";","module.exports = __webpack_public_path__ + \"static/max-length-714dbd1b2cc2a2437fc7f2ea05748311.gif\";","module.exports = __webpack_public_path__ + \"static/email-b80b17992bd3801ec4c2459796903663.gif\";","module.exports = __webpack_public_path__ + \"static/record-validator-42b7416c094b3fe4310271194ad8b916.gif\";","module.exports = __webpack_public_path__ + \"static/required-027af8940307dd96b2696949ac55cc99.gif\";","module.exports = __webpack_public_path__ + \"static/min-length-57206bd0ce3cf8209e839a81f1b7155e.gif\";","module.exports = __webpack_public_path__ + \"static/field-validator-25e645098d54b984dc2b487d96fe840c.gif\";"],"sourceRoot":""}