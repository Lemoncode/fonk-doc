{"version":3,"sources":["webpack:///../gifs/pattern.gif","webpack:///../gifs/formik/array-shopping-cart-validation.gif","webpack:///../gifs/max-length.gif","webpack:///../gifs/email.gif","webpack:///../gifs/required.gif","webpack:///../validators/builtin-validators.mdx","webpack:///../gifs/min-length.gif"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---validators-builtin-validators-mdx-a7acae08040b41b429fa.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/pattern-aafa785f6e9775b2f30e6c272cd56079.gif\";","module.exports = __webpack_public_path__ + \"static/array-shopping-cart-validation-32fb9f9483ead846c0c24b5a6507431b.gif\";","module.exports = __webpack_public_path__ + \"static/max-length-714dbd1b2cc2a2437fc7f2ea05748311.gif\";","module.exports = __webpack_public_path__ + \"static/email-b80b17992bd3801ec4c2459796903663.gif\";","module.exports = __webpack_public_path__ + \"static/required-027af8940307dd96b2696949ac55cc99.gif\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"built-in-validators\"\n    }}>{`Built in validators`}</h1>\n    <p>{`Fonk already ships a set of basic validators:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Required: check if a field is informed (field is not null, undefined or empty string), this can be applied to fields of type `}<em parentName=\"li\">{`string`}</em>{` or `}<em parentName=\"li\">{`number`}</em>{`.`}</li>\n      <li parentName=\"ul\">{`Pattern: check if field matches with a given RegExp.`}</li>\n      <li parentName=\"ul\">{`MinLength: check if a string field has a minimum length.`}</li>\n      <li parentName=\"ul\">{`MaxLength: check if a string field has a maximum length.`}</li>\n      <li parentName=\"ul\">{`Email: check if a string field is a well formed email address.`}</li>\n      <li parentName=\"ul\">{`Array: adds validation support to form array fields.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you want to customize the error messages that this validators provide by default, check the `}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/messages/error-message\"\n        }}>{`error-message`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/messages/internationalization\"\n        }}>{`internationalization`}</a></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"required\"\n    }}>{`Required`}</h2>\n    <p>{`Check if a field is informed (field is not null, undefined or empty string), this can be applied to fields of type `}<em parentName=\"p\">{`string`}</em>{` or `}<em parentName=\"p\">{`number`}</em>{`.`}</p>\n    <p>{`It accepts a custom parameter to instruct the validator to trim the incoming values\n(if true a value like ' ' would be treated as an empty string).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface RequiredArgs {\n  trim: boolean; // Default value equals true\n}\n\nexport const required: FieldValidationFunctionSync<RequiredArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Simple, (trim default value equals true):`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required],\n  },\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`With customArgs`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required],\n    password: [\n      {\n        validator: Validators.required,\n        customArgs: { trim: false },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"required\" src={require(\"../gifs/required.gif\")} /></p>\n    <p>{`Example:`}</p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/required\"\n      }}>{`Javascript`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/required\"\n      }}>{`Typescript`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"pattern\"\n    }}>{`Pattern`}</h2>\n    <p>{`Succeeds if a field matches with a defined `}<strong parentName=\"p\">{`RegExp`}</strong>{`, fails if not. This regular expression can be either a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\n      }}>{`RegExp`}</a>{` instance or a string.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <p>{`Is mandatory to pass the RegExp expression to be evaluated.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface PatternArgs {\n  pattern: string | RegExp;\n}\n\nexport const pattern: FieldValidationFunctionSync<PatternArgs> =\n(fieldValidatorArgs): ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`String:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: '^(7|8|9)\\\\\\\\d{9}$' },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`RegExp:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^(7|8|9)\\\\d{9}$/ },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`RegExp constructor:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: new RegExp(/^(7|8|9)\\\\d{9}$/) },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"pattern\" src={require(\"../gifs/pattern.gif\")} /></p>\n    <p>{`Example:`}</p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/pattern\"\n      }}>{`Javascript`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/pattern\"\n      }}>{`Typescript`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"minlength\"\n    }}>{`MinLength`}</h2>\n    <p>{`Succeeds if a field length is greater than the one informed in the customArgs.length`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <p>{`Is mandatory to pass the min length value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface LengthArgs {\n  length: number;\n}\n\nexport const minLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Custom message with interpolated `}<inlineCode parentName=\"p\">{`customArgs`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n        message: 'The min length is {{length}}',\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"min-length\" src={require(\"../gifs/min-length.gif\")} /></p>\n    <p>{`Example:`}</p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/min-length\"\n      }}>{`Javascript`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/min-length\"\n      }}>{`Typescript`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"maxlength\"\n    }}>{`MaxLength`}</h2>\n    <p>{`Succeeds if a field length is lower than the one informed in the customArgs.length`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <p>{`Is mandatory to pass the max length value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface LengthArgs {\n  length: number;\n}\n\nexport const maxLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p>{`Custom message with interpolated `}<inlineCode parentName=\"p\">{`customArgs`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n        message: 'The max length is {{length}}',\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"max-length\" src={require(\"../gifs/max-length.gif\")} /></p>\n    <p>{`Example:`}</p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/max-length\"\n      }}>{`Javascript`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/max-length\"\n      }}>{`Typescript`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"email\"\n    }}>{`Email`}</h2>\n    <p>{`Succeeds if a field value is a well formed email, fails if not.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If the string is empty it won't fail (to cover this case use the `}<em parentName=\"p\">{`required`}</em>{` validator).`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export const email: FieldValidationFunctionSync = (fieldValidatorArgs) : ValidationResult => {...}\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    email: [Validators.email],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"email\" src={require(\"../gifs/email.gif\")} /></p>\n    <p>{`Example:`}</p>\n    <p>{`You can find this example in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/email\"\n      }}>{`Javascript`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/email\"\n      }}>{`Typescript`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"array\"\n    }}>{`Array`}</h2>\n    <p>{`This validator allows you to add support to validation to array form fields, it works as an inception,\nyou get the fonk engine embedded into that array, `}<em parentName=\"p\">{`e.g. you got a shopping cart list and you want\nto validate that each Quantity field on each row is informed and is a valid number`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface ArrayArgs {\n  field: FieldValidationSchema;\n}\n\nexport const validator: FieldValidationFunctionAsync = validatorArgs => {\n`}</code></pre>\n    <p>{`Usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`const validationSchema = {\n  field: {\n    products: [\n      {\n        validator: Validators.array,\n        customArgs: {\n          field: {\n            name: [Validators.required],\n            quantity: [Validators.required, isNumber],\n            price: [Validators.required, isNumber],\n          },\n        },\n      },\n    ],\n  },\n};\n`}</code></pre>\n    <p><img alt=\"array-shopping-cart-validation\" src={require(\"../gifs/formik/array-shopping-cart-validation.gif\")} /></p>\n    <h2 {...{\n      \"id\": \"more-validators\"\n    }}>{`More validators`}</h2>\n    <p><strong parentName=\"p\">{`Fonk`}</strong>{` only ships with a minimal subset of validators to avoid adding extra weight to the library with other validators that you may not use.`}</p>\n    <p>{`If you are in the need of using / implementing other validators:`}</p>\n    <p>{`- You have an available list of microlibraries that implement a wide set of validators, allowing you to cherry pick the validators that you really need avoding extra weight into your application adding validators that you don't need. You can find a list of third party validators in the following `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validators/third-party-validators\"\n      }}>{`link`}</a>{`.`}</p>\n    <p>{`- You can implement your own custom validator, is quite easy, you can find instructions about how to build your own custom validation in these links: `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validators/custom-validators-sync\"\n      }}>{`sync custom validators`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validators/custom-validators-async\"\n      }}>{`async custom validators`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/min-length-57206bd0ce3cf8209e839a81f1b7155e.gif\";"],"sourceRoot":""}