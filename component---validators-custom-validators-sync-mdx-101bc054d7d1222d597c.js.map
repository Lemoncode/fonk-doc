{"version":3,"sources":["webpack:///../validators/custom-validators-sync.mdx","webpack:///../gifs/validate-record.gif","webpack:///../gifs/iban-custom-sync-validator.gif"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent","module","exports"],"mappings":"yeAMO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iCADR,iCAGA,iMAEA,iBAAQ,CACN,GAAM,mBADR,mBAGA,+LAEA,8BACE,iBAAGC,WAAW,cAAd,+WAGJ,mBAAGA,WAAW,KAAQ,CACd,KAAQ,iDADhB,QAHI,MAOF,mKAEA,iBAAQ,CACN,GAAM,yBADR,yBAGA,yEACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,uBAApB,yDAAsI,kBAAIA,WAAW,MACjJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,0BACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,wCACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,cAApB,0VAIA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,yHACK,kBAAIA,WAAW,MAAf,aADL,8MAIJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,oBAApB,uDAAiI,kBAAIA,WAAW,MAAf,oBAAjI,IAAmL,kBAAIA,WAAW,MAC9L,kBAAIA,WAAW,MAAf,yDAA8E,kBAAIA,WAAW,MAAf,oBAA9E,eAA2I,kBAAIA,WAAW,MAAf,aAA3I,yBACA,kBAAIA,WAAW,MAAf,sDAA2E,kBAAIA,WAAW,MAAf,oBAA3E,eAAwI,kBAAIA,WAAW,MAAf,aAAxI,iCACF,kBAAIA,WAAW,MAAf,WADE,sDACyF,kBAAIA,WAAW,MAAf,QADzF,wDAKN,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2VAmBL,iBAAQ,CACN,GAAM,uBADR,uBAGA,oGACA,uEAAsD,mBAAGA,WAAW,KAAQ,CACxE,KAAQ,oEAD0C,QAAtD,wGAGiG,kBAAIA,WAAW,KAAf,MAHjG,MAIA,oHAAmG,kBAAIA,WAAW,KAAf,SAAnG,0CACgC,kBAAIA,WAAW,KAAf,UADhC,KACwE,kBAAIA,WAAW,KAAf,cADxE,KACoH,kBAAIA,WAAW,KAAf,WADpH,4HAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6QAcL,mNAC2D,kBAAIA,WAAW,KAAf,MAD3D,MAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,gcAoBL,8JAEA,qBAAG,kBAAIA,WAAW,KAAf,+DAAH,0CAAqI,kBAAIA,WAAW,KAAf,sCAArI,mGAEW,sBAAQA,WAAW,KAAnB,YAFX,eAEuE,kBAAIA,WAAW,KAAf,SAFvE,oKAIA,iQAGA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,sKACwD,kBAAIA,WAAW,KAAf,eADxD,6FAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,oHACO,kBAAIA,WAAW,KAAf,WADP,2FAEN,kBAAIA,WAAW,KAAf,uBAFM,wBAEkE,kBAAIA,WAAW,KAAf,yBAFlE,QAKJ,kKACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qmBAyBL,kJAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,moBA0BL,8BACE,iBAAGA,WAAW,cAAd,wHACa,mBAAGA,WAAW,KAAQ,CAC/B,KAAQ,qCADC,WADb,MAKF,qBAAG,kBAAIA,WAAW,KAAf,qLAAH,6BACsB,kBAAIA,WAAW,KAAf,cADtB,iBAC8E,kBAAIA,WAAW,KAAf,WAD9E,sLAEqE,kBAAIA,WAAW,KAAf,cAFrE,MAGA,uGAAsF,kBAAIA,WAAW,KAAf,cAAtF,oBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iCAML,wHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,opCAqCL,oHACA,qBAAG,kBAAIA,WAAW,KAAf,oCACH,mHACA,qBAAG,kBAAIA,WAAW,KAAf,kCACH,qGACA,qBAAG,kBAAIA,WAAW,KAAf,qDACH,8BACE,iBAAGA,WAAW,cAAa,kBAAIA,WAAW,KAAf,eAA3B,4DAEF,8CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,keAkBL,qBAAG,kBAAIA,WAAW,KAAf,iGAAH,+EACgE,kBAAIA,WAAW,KAAf,mBADhE,mBAEA,8BACE,iBAAGA,WAAW,cAAd,oHAEF,qBAAG,mBAAKC,IAAI,6BAA6BC,IAAKC,EAAQ,WACtD,qBAAG,kBAAIH,WAAW,KAAf,sGAAH,4NAGA,8BACE,iBAAGA,WAAW,cAAd,iGAA6H,mBAAGA,WAAW,KAAQ,CAC/I,KAAQ,qDADiH,QAA7H,MAIF,sDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,qHAQL,mGAAkF,kBAAIA,WAAW,KAAf,qBAAlF,yCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8rBAyBL,qBAAG,kBAAIA,WAAW,KAAf,uIAAH,8CACuC,kBAAIA,WAAW,KAAf,8BADvC,QACsG,kBAAIA,WAAW,KAAf,kCADtG,yEAGA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,cAAnB,sEAAwI,kBAAIA,WAAW,KAAf,YAAxI,aAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,UAAnB,8FACF,kBAAIA,WAAW,KAAf,YADE,aAIJ,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+xCAqCL,oCACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8HADQ,oBAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,8HADQ,oBAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uIADQ,+BAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,uIADQ,+BAApB,MAIF,iBAAQ,CACN,GAAM,oBADR,oBAGA,wNAEA,kJACA,iBAAQ,CACN,GAAM,gCADR,gCAGA,yEACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,wBAApB,yDAAuI,kBAAIA,WAAW,MAClJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,wCACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,yHACK,kBAAIA,WAAW,MAAf,aADL,8MAIJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,oBAApB,uDAAiI,kBAAIA,WAAW,MAAf,oBAAjI,IAAmL,kBAAIA,WAAW,MAC9L,kBAAIA,WAAW,MAAf,yDAA8E,kBAAIA,WAAW,MAAf,oBAA9E,qBAAiJ,kBAAIA,WAAW,MAAf,aAAjJ,aACA,kBAAIA,WAAW,MAAf,sDAA2E,kBAAIA,WAAW,MAAf,oBAA3E,qBAA8I,kBAAIA,WAAW,MAAf,aAA9I,qBACF,kBAAIA,WAAW,MAAf,WADE,sDACyF,kBAAIA,WAAW,MAAf,QADzF,wEAKN,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0TAiBL,iBAAQ,CACN,GAAM,yBADR,uBAGA,yGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uGASL,sPACyF,kBAAIA,WAAW,KAAf,WADzF,aAEA,uDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,ybAgBL,8BACE,iBAAGA,WAAW,cAAd,6JAGF,qBAAG,mBAAKC,IAAI,kBAAkBC,IAAKC,EAAQ,WAC3C,kDACA,sBACE,kBAAIH,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mGADQ,oBAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mGADQ,oBAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4GADQ,+BAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4GADQ,+BAApB,MAIF,iBAAQ,CACN,GAAM,gBADR,gBAGA,6HAA4G,mBAAGA,WAAW,KAAQ,CAC9H,KAAQ,iDADgG,kCAA5G,M,8MAOJJ,EAAWQ,gBAAiB,G,qBC3f5BC,EAAOC,QAAU,IAA0B,+D,qBCA3CD,EAAOC,QAAU,IAA0B","file":"component---validators-custom-validators-sync-mdx-101bc054d7d1222d597c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-validators-synchronous\"\n    }}>{`Custom validators synchronous`}</h1>\n    <p>{`Once you have checked that a given field or record validation is not available in the base or\nthird parties list of validators, it's time to create your own validator.`}</p>\n    <h2 {...{\n      \"id\": \"field-validator\"\n    }}>{`Field Validator`}</h2>\n    <p>{`A field synchronous validator is just a function that expects one argument (this argument is an object that contains\nseveral fields), and return a validation result.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`What do we mean by synchronous? That is any validation that executes some code and returns a result straightforward,\nif your validation needs to make a request to a server, it cannot provide a straightdforward result and probably\nyou will have to manage it using promises, in that case you have to use asynchronous validations, this is covered in the following\n`}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/validators/custom-validators-async\"\n        }}>{`link`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`Usually a Field Validator can be a perfect piece of code to be reused across the application and even to be included\nin a common library.`}</p>\n    <h3 {...{\n      \"id\": \"disecting-a-validator\"\n    }}>{`Disecting a validator`}</h3>\n    <p>{`The definition of a synchronous field validator:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`FieldValidationArgs`}</strong>{`: This is passed as a single argument in the validator`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`value`}</strong>{`: current field value.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: form / record values (all fields).`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`customArgs`}</strong>{`: we can pass custom arguments to our validator, this allow us to create flexible and configurable\nvalidators (e.g. in a min-length validator we can pass as customArgument a number indicating the minlength allowed,\nor if we have a password / repeat password validator we can pass the id of the password field to the repeat password\nfield).`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: you can override here the error message that the validator returns in case of failure. You can inject\nin a message `}<em parentName=\"li\">{`parameter`}</em>{` to be interpolated by the validator (e.g. 'string must be at least {{minlength}}'),\nin some validators there may be more than one error message defined, in that case we can pass an array of strings.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValidationResult`}</strong>{`: once the validator has been executed it returns a `}<em parentName=\"li\">{`ValidationResult`}</em>{`:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`If the validation succeeds, you get as return value a `}<em parentName=\"li\">{`ValidationResult`}</em>{` where it's `}<em parentName=\"li\">{`succeeded`}</em>{` field value is true.`}</li>\n          <li parentName=\"ul\">{`If the validation fails, you get as return value a `}<em parentName=\"li\">{`ValidationResult`}</em>{` where it's `}<em parentName=\"li\">{`succeeded`}</em>{` field value is false,\nand a `}<em parentName=\"li\">{`message`}</em>{` where you get a user friendly error message and a `}<em parentName=\"li\">{`type`}</em>{` field that indicates the validator that\nfailed.`}</li>\n        </ul></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface FieldValidatorArgs {\n  value: any;\n  values?: any;\n  customArgs?: any;\n  message?: string | string[];\n}\n\nexport interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string;\n}\n\nexport type FieldValidationFunctionSync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => ValidationResult;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"learning-by-example\"\n    }}>{`Learning by example`}</h3>\n    <p>{`The best way to learn how to implement a validator is just by building one.`}</p>\n    <p>{`Let's get started: we want to validate that an `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/International_Bank_Account_Number\"\n      }}>{`IBAN`}</a>{`\n(International Bank Account) field belongs to Spain (that is first two characters must be equal to `}<em parentName=\"p\">{`ES`}</em>{`).`}</p>\n    <p>{`We will start simple, in order to perform the validation we only need use the current field `}<em parentName=\"p\">{`value`}</em>{` we\ndon't need other optional params: `}<em parentName=\"p\">{`values`}</em>{`, `}<em parentName=\"p\">{`customArgs`}</em>{`, `}<em parentName=\"p\">{`message`}</em>{`, we will follow a TDD like approach\nwe will create the validator always faling (returning a failed validation result).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validatorType = 'MY_IBAN_VALIDATOR';\n\nexport const myValidator = fieldValidatorArgs => {\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message: 'IBAN does not belong to Spain',\n  };\n\n  return validationResult;\n};\n`}</code></pre>\n    <p>{`Let's got for the next step, we got a validator that always fails, now is time to inject our logic; we just want to validate\nthat the IBAN belongs to spain (first two characters must be `}<em parentName=\"p\">{`ES`}</em>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`const validatorType = 'MY_IBAN_VALIDATOR';\n\nexport const myValidator = fieldValidatorArgs => {\n+ const { value } = fieldValidatorArgs;\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message: 'IBAN does not belong to Spain',\n  };\n\n+ if (value && value[0] === 'E' && value[1] === 'S') {\n+   validationResult.succeeded = true;\n+   validationResult.message = '';\n+ }\n\n  return validationResult;\n}\n`}</code></pre>\n    <p>{`Now we got our simple validator working, if you enter an IBAN that belongs to spain it will pass\nthe validation if not it will fail.`}</p>\n    <p><em parentName=\"p\">{`Watch out... what if we pass a null/undefined/empty string?`}</em>{` Validation will succeed in this case, `}<em parentName=\"p\">{`but is\nnot a valid IBAN isn't it?`}</em>{` Usually is a good practice to delegate this validation to a prior validator like\nthe built-in `}<strong parentName=\"p\">{`required`}</strong>{` validator, `}<em parentName=\"p\">{`why?:`}</em>{` maybe the field you want to validate is optional hence the\nIBAN validator should not fail, by doing that we are following the single responsibility principle.`}</p>\n    <p>{`The validator was fine but what happens if we need to override the validation message? For instance you\nneed give support to multiple languages (english, spanish, french...), you can override the\nmessage(s) validators in two ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`You can setup the validator message(s) globally for any ValidationSchema instance (for instance you\njust change from english to french language and you want that `}<em parentName=\"p\">{`MyValidator`}</em>{` shows the error message\nin french in all the application forms where it's being used).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`You can override the validation message just for a given ValidationSchema (for instance if you use\nthe built in `}<em parentName=\"p\">{`pattern`}</em>{` (regex) validator you may want for an specific field in a validation schema to return\n`}<em parentName=\"p\">{`invalid credit card`}</em>{` and for other cases `}<em parentName=\"p\">{`invalid shield number`}</em>{`).`}</p>\n      </li>\n    </ul>\n    <p>{`Let's start by adding implementation into our validator to allow the developer consuming the validator change the error message globally:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`const validatorType = 'MY_IBAN_VALIDATOR';\n\n+ let defaultMessage = 'IBAN does not belong to Spain';\n+ export const setErrorMessage = message => (defaultMessage = message);\n\nexport const myValidator = fieldValidatorArgs => {\n  const { value } = fieldValidatorArgs;\n\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n-   message: 'IBAN does not belong to Spain',\n+   message: defaultMessage,\n  };\n\n  if (value && value[0] === 'E' && value[1] === 'S') {\n    validationResult.succeeded = true;\n    validationResult.message = '';\n  }\n\n  return validationResult;\n};\n`}</code></pre>\n    <p>{`Now let's go for the specific override (just only customize the message for a given field on a given\nvalidation schema):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`const validatorType = 'MY_IBAN_VALIDATOR';\n\nlet defaultMessage = 'IBAN does not belong to Spain';\nexport const setErrorMessage = message => (defaultMessage = message);\n\nexport const myValidator = fieldValidatorArgs => {\n- const { value } = fieldValidatorArgs;\n+ const { value, message = defaultMessage } = fieldValidatorArgs;\n\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n-   message: defaultMessage,\n+   message,\n  };\n\n  if (value && value[0] === 'E' && value[1] === 'S') {\n    validationResult.succeeded = true;\n    validationResult.message = '';\n  }\n\n  return validationResult;\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you want to learn more about how to customize error message + internationalization you can jump\nto the following `}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/messages/error-message\"\n        }}>{`section`}</a>{`.`}</p>\n    </blockquote>\n    <p><em parentName=\"p\">{`That was awesome, but I need to implement the same validation for country entries like france (FR), germany (DE), and others, is there a way to make this validator more generic?`}</em>{`\nYes, we can make use of `}<em parentName=\"p\">{`customArgs`}</em>{` and pass the `}<em parentName=\"p\">{`country`}</em>{` prefix to validate (in a real case you could opt in to implement this inside the validator using a switch\nstatement but the goal of this example is to show you how to deal with `}<em parentName=\"p\">{`customArgs`}</em>{`).`}</p>\n    <p>{`We can assume the consumer of this validator will pass the country code in the `}<em parentName=\"p\">{`customArgs`}</em>{` something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  countryCode: 'ES',\n}\n`}</code></pre>\n    <p>{`Let's further enhance the validator (we will add support for that custom arg in our validator):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`const validatorType = 'MY_IBAN_VALIDATOR';\n\nlet defaultMessage = 'IBAN does not belong to Spain';\nexport const setErrorMessage = message => (defaultMessage = message);\n\n+ const hasValidCountryCode = (value, customArgs) =>\n+   value &&\n+   value[0] === customArgs.countryCode[0] &&\n+   value[1] === customArgs.countryCode[1];\n\nexport const myValidator = fieldValidatorArgs => {\n- const { value, message = defaultMessage } = fieldValidatorArgs;\n+ const { value, customArgs, message = defaultMessage } = fieldValidatorArgs;\n\n+ // Depending in your case you may feed default values to customArgs or throw\n+ // an exception or a console.log error\n+ if (!customArgs.countryCode || customArgs.countryCode.length !== 2) {\n+   throw \\`\\${validatorType}: error you should inform customArgs countryCode prefix (2 characters length)\\`;\n+ }\n\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message,\n  };\n\n- if (value && value[0] === 'E' && value[1] === 'S') {\n+ if (hasValidCountryCode(value, customArgs)) {\n    validationResult.succeeded = true;\n    validationResult.message = '';\n  }\n\n  return validationResult;\n};\n`}</code></pre>\n    <p>{`That was great, but there's something going wrong, the validation error message still says:`}</p>\n    <p><em parentName=\"p\">{`'IBAN does not belong to Spain'`}</em></p>\n    <p>{`We could just go the easy way and change the validation message to something more generic:`}</p>\n    <p><em parentName=\"p\">{`'IBAN country code not valid'`}</em></p>\n    <p>{`But we want to use a more elegant solution, why not building a message like:`}</p>\n    <p><em parentName=\"p\">{`IBAN country code prefix must be {{countryCode}}`}</em></p>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`countryCode`}</em>{` is just the name of the customArg we added previously.`}</p>\n    </blockquote>\n    <p>{`Let's implement this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`+ import { parseMessageWithCustomArgs } from '@lemoncode/fonk';\nconst validatorType = 'MY_IBAN_VALIDATOR';\n\n- let defaultMessage = 'IBAN does not belong to Spain';\n+ let defaultMessage = 'IBAN does not belong to {{countryCode}}';\nexport const setErrorMessage = message => (defaultMessage = message);\n...\n\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n-   message,\n+   message: parseMessageWithCustomArgs(message, customArgs),\n  };\n\n`}</code></pre>\n    <p><em parentName=\"p\">{`Wow ! That was awesome ! but how can I customize this message if I need internationalization?`}</em>{` You can\noverride the message and just use the same interpolation sequence `}<em parentName=\"p\">{`{{countryCode}}`}</em>{` where applies.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note down: you have to document this in your validator so consumers of your validator are aware of this params.`}</p>\n    </blockquote>\n    <p><img alt=\"iban-custom-sync-validator\" src={require(\"../gifs/iban-custom-sync-validator.gif\")} /></p>\n    <p><em parentName=\"p\">{`So far so good, but what happens if I need another form field value to execute my field validator?`}</em>{` Let's say for\ninstance I got a signUp form where the user has to enter his password, then reenter it in a different field\nto avoid him introducing any typo by mistake. That's a great use case, let's dig into that:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This validator is already available as a third party plugin, you can find it in the following `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/Lemoncode/fonk-iban-validator\"\n        }}>{`link`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`We've got the following form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const mySignupFormData = {\n  email: 'john.doe@mydomain.com'\n  password : '123',\n  repeatPassword: '124',\n}\n`}</code></pre>\n    <p>{`First we will implement a validator specific for that form, we will access `}<em parentName=\"p\">{`customArgs.values`}</em>{` field to get other form field value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validatorType = 'FIELDS_MATCH_VALIDATOR';\n\n let defaultMessage = 'Fields does not match';\n export const setErrorMessage = message => (defaultMessage = message);\n\nexport const fieldMatchValidator = (fieldValidatorArgs) {\n  // All form/record data is passed in the fieldValidatorArgs.values field\n  const {value, values, message = defaultMessage} = fieldValidatorArgs\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message,\n  };\n\n  // Now we can acces the 'password' field from the values field\n  if (value === values.password) {\n    validationResult.succeeded = true;\n    validationResult.message = '';\n  }\n\n  return validationResult;\n}\n`}</code></pre>\n    <p><em parentName=\"p\">{`Fine, we managed to build to the validator, but is too tied up to the form, couldn't it be possible to create a reusable validator?`}</em>{`\nthe answer is yes if we combine togheter `}<em parentName=\"p\">{`fieldValidationArgs.values`}</em>{` and `}<em parentName=\"p\">{`fieldValidationArgs.customArgs`}</em>{` (in customArgs we will\npass the name of the field to compare with).`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`customArgs`}</strong>{`: here we will pass the id of the field to check (in this case the `}<em parentName=\"p\">{`password`}</em>{` field).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`values`}</strong>{`: here we get all the form/record values, we can use the following approach to access\nthe `}<em parentName=\"p\">{`password`}</em>{` field:`}</p>\n      </li>\n    </ul>\n    <p>{`Let's see how to combine this both together:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`const validatorType = 'FIELDS_MATCH_VALIDATOR';\n\n let defaultMessage = 'Fields does not match';\n export const setErrorMessage = message => (defaultMessage = message);\n\nexport const fieldMatchValidator = (fieldValidatorArgs) {\n  // All form/record data is passed in the fieldValidatorArgs.values field\n+ // We will make use of customArgs\n-  const {value, values, message = defaultMessage} = fieldValidatorArgs\n+   const {value, values, customArgs, message = defaultMessage} = fieldValidatorArgs\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message,\n  };\n\n+  // Depending in your case you may feed default values to customArgs or throw\n+  // an exception or a console.log error\n+  if(!customArgs.fieldToCompareName) {\n+    throw(\\`\\${validatorType}: you need to inform the fieldToCompareName\\`)\n+  }\n\n-  // Now we can acces the 'password' field from the values field\n+  We just grab the value of the field using the bracket accesor\n+  more info:\n+  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\n-  if (value === values.password) {\n+  if(value === value[customArgs.fieldToCompareName])\n    validationResult.succeeded = true;\n    validationResult.message = '';\n  }\n\n  return validationResult;\n}\n`}</code></pre>\n    <p>{`Check here:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/js/vanilla/iban-custom-sync-validator\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/ts/vanilla/iban-custom-sync-validator\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/js/react-final-form/iban-custom-sync-validator\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/ts/react-final-form/iban-custom-sync-validator\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"record-validator\"\n    }}>{`Record Validator`}</h2>\n    <p>{`A record validator is a validation that is not tied up to an specific field, is usually something that we trigger\nwhen the user hits submit, and before sending the information to the server.`}</p>\n    <p>{`Record validations usually are not highly reusable functions, they are tied up to the domain of the form to be validated.`}</p>\n    <h3 {...{\n      \"id\": \"disecting-a-record-validator\"\n    }}>{`Disecting a record validator`}</h3>\n    <p>{`The definition of a synchronous field validator:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`RecordValidationArgs`}</strong>{`: This is passed as a single argument in the validator`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`values`}</strong>{`: form / record values (all fields).`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`message`}</strong>{`: you can override here the error message that the validator returns in case of failure. You can inject\nin a message `}<em parentName=\"li\">{`parameter`}</em>{` to be interpolated by the validator (e.g. 'string must be at least {{minlength}}'),\nin some validators there may be more than one error message defined, in that case we can pass an array of strings.`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`ValidationResult`}</strong>{`: once the validator has been executed it returns a `}<em parentName=\"li\">{`ValidationResult`}</em>{`:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`If the validation succeeds, you get as return value a `}<em parentName=\"li\">{`ValidationResult`}</em>{` where it's field `}<em parentName=\"li\">{`succeeded`}</em>{` is true.`}</li>\n          <li parentName=\"ul\">{`If the validation fails, you get as return value a `}<em parentName=\"li\">{`ValidationResult`}</em>{` where it's field `}<em parentName=\"li\">{`succeeded`}</em>{` is false,\nand a `}<em parentName=\"li\">{`message`}</em>{` where you get a user friendly error message and a `}<em parentName=\"li\">{`type`}</em>{` field that indicates the validator id that\ngenerated the error.`}</li>\n        </ul></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface RecordValidatorArgs {\n  values: any;\n  message?: string | string[];\n}\n\nexport interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string;\n}\n\nexport type RecordValidationFunctionSync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => ValidationResult;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"learning-by-example-1\"\n    }}>{`Learning by example`}</h3>\n    <p>{`We got a form that displays the total monetary amount of a given shopping order:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const myFormValues = {\n  product: 'shoes',\n  discount: 5,\n  price: 20,\n  isPrime: false,\n};\n`}</code></pre>\n    <p>{`Once the user hits on submit order and before sending the request to the server we want to check the following rule: FreeShipping\ncan be true if the total amount (price - discount) is greater than 20 USD, or if the field `}<em parentName=\"p\">{`isPrime`}</em>{` is true.`}</p>\n    <p>{`A validator to implement this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// A record validator receives in the args an object with\n// all the record values and optionally the custom message\nconst freeShippingRecordValidator = ({ values }) => {\n  const succeeded = values.isPrime || values.price - values.discount > 20;\n\n  return {\n    succeeded,\n    message: succeeded\n      ? ''\n      : 'Subscribe to prime service or total must be greater than 20USD',\n    type: 'RECORD_FREE_SHIPPING',\n  };\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you need to implement internationalization or customize messages you can follow the same approach\nas the described for the field record validations.`}</p>\n    </blockquote>\n    <p><img alt=\"validate-record\" src={require(\"../gifs/validate-record.gif\")} /></p>\n    <p>{`Full example implemented:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-record\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/validate-record\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/validate-record\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/validate-record\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h1 {...{\n      \"id\": \"next-section\"\n    }}>{`Next section`}</h1>\n    <p>{`Now that you have learn how to build synchronous custom validators is time to learn how to implement `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validators/custom-validators-async\"\n      }}>{`asynchronous custom validators`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/validate-record-2ed0fb7daf0f2685a52e5a0fa9a776ee.gif\";","module.exports = __webpack_public_path__ + \"static/iban-custom-sync-validator-1c7399ede0c6bcae0a154f3344188c23.gif\";"],"sourceRoot":""}