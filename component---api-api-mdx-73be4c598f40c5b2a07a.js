(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{975:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return r})),t.d(a,"default",(function(){return d}));t(12),t(5),t(6),t(3),t(7),t(4),t(9);var i=t(77),n=t(958);function l(){return(l=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"api/api.mdx"}});var o={_frontmatter:r},c=n.a;function d(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,i,n={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,["components"]);return Object(i.b)(c,l({},o,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"api"},"API"),Object(i.b)("p",null,"This section documents the complete ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk"}),"fonk")," API. Keep in mind that ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk"}),"fonk")," is only concerned with managing validations in Vanilla JavaScript."),Object(i.b)("p",null,"In a real app, you'll also want to use some integration library like ",Object(i.b)("a",l({parentName:"p"},{href:"/react-final-form"}),"react-final-form"),"."),Object(i.b)("h2",{id:"validation-schema-definition"},"Validation Schema definition"),Object(i.b)("h3",{id:"validationschema"},"ValidationSchema"),Object(i.b)("p",null,"In this structure you can define all the validations associated to a given form (field and record validations)."),Object(i.b)("p",null,"This allow us to define all validation associated to a given form in a declarative way."),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"field"),": optional entry, here you can define all field validations associated to a given form\n(see ",Object(i.b)("a",l({parentName:"p"},{href:"/api#fieldvalidationschema"}),"FieldValidationSchema")," for more information.)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"record"),": optional entry, here you can define all record validations associated to a given form\n(see ",Object(i.b)("a",l({parentName:"p"},{href:"/api#recordvalidationschema"}),"RecordValidationSchema")," for more information.)"))),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface ValidationSchema {\n  field?: FieldValidationSchema;\n  record?: RecordValidationSchema;\n}\n")),Object(i.b)("h3",{id:"fieldvalidationschema"},"FieldValidationSchema"),Object(i.b)("p",null,"In this structure you can define all field validations associated to a given form. For each field, it has to add a validator list.\nEach validator could be a ",Object(i.b)("a",l({parentName:"p"},{href:"/api#field-synchronous-validator"}),"field sync validator"),", ",Object(i.b)("a",l({parentName:"p"},{href:"/api#field-asynchronous-validator"}),"field async validator")," or ",Object(i.b)("a",l({parentName:"p"},{href:"/api#fullfieldvalidation"}),"full field validation")),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"field name"),": Field name which it wants to apply the validator")),Object(i.b)("p",null,"Values:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"An array of ",Object(i.b)("a",l({parentName:"li"},{href:"/api#field-synchronous-validator"}),"field sync validator"),", ",Object(i.b)("a",l({parentName:"li"},{href:"/api#field-asynchronous-validator"}),"field async validator")," or ",Object(i.b)("a",l({parentName:"li"},{href:"/api#fullfieldvalidation"}),"full field validation"))),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'const validationSchema: ValidationSchema = {\n  field: {\n    myFieldName: [\n      Validators.required.validator, // This is a sync validator\n      loginValidator, // This is a custom async validator\n      {\n        validator: Validators.required.validator, // This is a sync validator\n        customArgs: { otherField: "other" },\n        message: "Required field"\n      },\n      {\n        validator: loginValidator, // This is a custom async validator\n        customArgs: { otherField: "other" },\n        message: "Invalid login"\n      }\n    ]\n  }\n};\n')),Object(i.b)("h4",{id:"fullfieldvalidation"},"FullFieldValidation"),Object(i.b)("p",null,"Structure to define a field validation:"),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"validator"),": ",Object(i.b)("a",l({parentName:"li"},{href:"/api#field-asynchronous-validator"}),"field async validator")," or ",Object(i.b)("a",l({parentName:"li"},{href:"/api#fullfieldvalidation"}),"full field validation")," validation function to apply."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"customArgs"),": optional, here you can pass any additional configuration, needed to setup the validator (e.g. in a max-length validation the length value, or in a regEx validator the regEx pattern)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"message"),": optional, in this parameter you can override the default message(s) that the validator generates.")),Object(i.b)("h4",{id:"examples"},"Examples:"),Object(i.b)("p",null,"You can find these examples in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/field-validator"}),"fonk examples"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Schema Field validations")),Object(i.b)("p",null,"Let's say we want to build a Login Form, and it contains the following record:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const loginModel = {\n  user,\n  password\n};\n")),Object(i.b)("p",null,"We want to validate that both user and password are required field, a validation\nschema to define these validations:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'import { Validators } from "@lemoncode/fonk";\n\nconst loginFormValidationSchema = {\n  field: {\n    user: [Validators.required.validator],\n    password: [Validators.required.validator]\n  }\n};\n')),Object(i.b)("p",null,"Let's follow up completing this form validation, in this case it wants to ensure\nthat the user field is required and a well formed email address:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'import { Validators } from "@lemoncode/fonk";\n\nconst loginFormValidationSchema = {\n  field: {\n    user: [Validators.required.validator, Validators.email.validator],\n    password: [Validators.required.validator]\n  }\n};\n')),Object(i.b)("p",null,"Let's add one more step of complexity in this case it wants to ensure that\nthe password field name is at least 5 characters length, it can use the\nmin-length validator, but it has to feed and additional parameter to\nindicate the minumum length, in this case the validation schema accepts\nboth function and structure based definition to include validation it will\nuse the second option."),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'import { Validators } from "@lemoncode/fonk";\n\nconst loginFormValidationSchema = {\n  field: {\n    user: [Validators.required.validator, Validators.email.validator],\n    password: [\n      Validators.required.validator,\n      {\n        validator: Validators.minLength.validator,\n        customArgs: { length: 3 }\n      }\n    ]\n  }\n};\n')),Object(i.b)("h3",{id:"recordvalidationschema"},"RecordValidationSchema"),Object(i.b)("p",null,"In this structure you can define all record validations associated to a given form. For each record, it has to add a validator list.\nEach validator could be a ",Object(i.b)("a",l({parentName:"p"},{href:"/api#record-synchronous-validator"}),"record sync validator"),", ",Object(i.b)("a",l({parentName:"p"},{href:"/api#record-asynchronous-validator"}),"record async validator")," or ",Object(i.b)("a",l({parentName:"p"},{href:"/api#fullrecordvalidation"}),"full record validation")),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"record name"),": Record name which it wants to apply the validator")),Object(i.b)("p",null,"Values:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"An array of ",Object(i.b)("a",l({parentName:"li"},{href:"/api#record-synchronous-validator"}),"record sync validator"),", ",Object(i.b)("a",l({parentName:"li"},{href:"/api#record-asynchronous-validator"}),"record async validator")," or ",Object(i.b)("a",l({parentName:"li"},{href:"/api#fullrecordvalidation"}),"full record validation"))),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'const validationSchema: ValidationSchema = {\n  record: {\n    myRecordName: [\n      freeShippingAllowed, // This is a custom sync validator\n      asyncFreeShippingAllowed, // This is a custom async validator\n      {\n        validator: freeShippingAllowed, // This is a sync validator\n        message: "Total must be greater than 30USD"\n      },\n      {\n        validator: asyncFreeShippingAllowed, // This is a custom async validator\n        message: "Total must be greater than 60USD"\n      }\n    ]\n  }\n};\n')),Object(i.b)("h4",{id:"fullrecordvalidation"},"FullRecordValidation"),Object(i.b)("p",null,"Structure to define a record validation:"),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"validator"),": ",Object(i.b)("a",l({parentName:"li"},{href:"/api#record-asynchronous-validator"}),"record async validator")," or ",Object(i.b)("a",l({parentName:"li"},{href:"/api#fullrecordvalidation"}),"full record validation")," validation function to apply."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"message"),": optional, in this parameter you can override the default message(s) that the validator generates.")),Object(i.b)("h4",{id:"examples-1"},"Examples:"),Object(i.b)("p",null,"You can find these examples in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/record-validator"}),"fonk examples"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Record Field validations")),Object(i.b)("p",null,"Sometimes you need to create global validation that is not tied up to a specific field, or\nyou want it to be fired once the user has fullfilled all the data in the validation form, a\nuse case for this type of validation could be: shopping cart checkout, offer free shipping\nif total amount (including discount) is greater than 30 USD"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const checkoutForm = {\n   subtotal,\n   discount,\n   total,\n   freeshipping,\n  }\n};\n")),Object(i.b)("p",null,"Let's define our record validator rule:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'const freeShippingAllowed = values => ({\n  message: "Total must be greater than 30USD to get cost free shippings",\n  type: "RECORD_FREE_SHIPPING",\n  succeeded: value.subtotal - value.discount >= 30\n});\n')),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const checkoutFormValidationSchema = {\n  record: {\n    freeShippingValidtion: [freeShippingAllowed]\n  }\n};\n")),Object(i.b)("h2",{id:"createformvalidation"},"createFormValidation"),Object(i.b)("p",null,"Factory method creates a new ",Object(i.b)("a",l({parentName:"p"},{href:"/api#formvalidation"}),"FormValidation"),". This is the main entry point when creating FormValidations"),Object(i.b)("p",null,"Arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#validationschema"}),Object(i.b)("strong",{parentName:"a"},"ValidationSchema")),": validations associated to a given form (field and record validations)\n",Object(i.b)("a",l({parentName:"li"},{href:"/api#validationschema"}),"ValidationSchema"))),Object(i.b)("p",null,"Returned Value"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#formvalidation"}),Object(i.b)("strong",{parentName:"a"},"FormValidation")),": a FormValidation instance to fire validations. See ",Object(i.b)("a",l({parentName:"li"},{href:"/api#formvalidation"}),Object(i.b)("strong",{parentName:"a"},"FormValidation"))," for more information.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"const validationSchema: ValidationSchema = {\n  // Your validation schema\n};\nconst formValidation: FormValidation = createFormValidation(validationSchema);\n")),Object(i.b)("h3",{id:"formvalidation"},"FormValidation"),Object(i.b)("p",null,"This is the main class you will interact with when validating forms, it allows you to inform the form validation\nschema in the constructor of the class, then it exposes methods to fire ",Object(i.b)("a",l({parentName:"p"},{href:"/api#validatefield"}),"validateField"),", ",Object(i.b)("a",l({parentName:"p"},{href:"/api#validaterecord"}),"validateRecord")," and ",Object(i.b)("a",l({parentName:"p"},{href:"/api#validateform"}),"validateForm")," (fire all field plus record validations)."),Object(i.b)("h4",{id:"constructor"},"Constructor"),Object(i.b)("p",null,"In order to instantiate the class it needs to inform a ",Object(i.b)("a",l({parentName:"p"},{href:"/api#validationschema"}),"ValidationSchema"),", internally\nthe constructor will traverse the validation schema and categorize field and record validations."),Object(i.b)("p",null,"Arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"validatonSchema"),": The form ",Object(i.b)("a",l({parentName:"li"},{href:"/api#validationschema"}),"ValidationSchema"))),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"  constructor(validationSchema: ValidationSchema) {\n")),Object(i.b)("h4",{id:"validatefield"},"ValidateField"),Object(i.b)("p",null,"Allows us to fire all the validations associated to given field, this method is async and it returns a promise with a ",Object(i.b)("a",l({parentName:"p"},{href:"/api#validationresult"}),"validation result"),"."),Object(i.b)("p",null,"How does it works:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It starts iterating over all the associated fields that have validations defined in the ",Object(i.b)("a",l({parentName:"li"},{href:"/api#validationschema"}),"ValidationSchema"),":",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The validation engine will start sequentially firing the list of validations associated to that field in the form validation schema."))),Object(i.b)("li",{parentName:"ul"},"It will stop iterating through all validations associated to the given field:\nA. When it finds a validation that fails, in that case it will indicate that the field validation failed, which validation failed, plus the error message associated.\nB. When all associated fields validations succeeded, in that case it will return a succeeded validation result.")),Object(i.b)("p",null,"Arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fieldId"),": name of the field to be validated (e.g. run all the validation associated to the form password field)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"value"),": current value of the field."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"values"),": optional argument. All form values (e.g. in a login form, values would be username and password fields).")),Object(i.b)("p",null,"Returns:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#validationresult"}),Object(i.b)("strong",{parentName:"a"},"Promise<ValidationResult",">")),": Result of firing all the field validations.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"public validateField(fieldId: string, value: any, values?: any): Promise<ValidationResult>\n")),Object(i.b)("h4",{id:"validaterecord"},"ValidateRecord"),Object(i.b)("p",null,"Allows us to fire all record validations associated to the form, this method is async returns a promise with a RecordValidation result."),Object(i.b)("p",null,"How does it works:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It passes as arguments the whole form information (aka. record or values)."),Object(i.b)("li",{parentName:"ul"},"The validation engine will start sequentially firing the list record validations associated to the form."),Object(i.b)("li",{parentName:"ul"},"It will stop iterating through all validations associated to the given field:\nA. When it finds a validation that fails, in that case it will indicate that the record validation failed, which validation failed, plus the error message associated.\nB. When all associated record validations succeed, in that case it will return a validation succeed result.")),Object(i.b)("p",null,"Arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"values"),": All form values (e.g. in a login form, values would be username and password fields).")),Object(i.b)("p",null,"Returns:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#recordvalidationresult"}),Object(i.b)("strong",{parentName:"a"},"Promise<RecordValidationResult",">")),": Result of firing all the record validations.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"public validateRecord(values?: any): Promise<RecordValidationResult>\n")),Object(i.b)("h4",{id:"validateform"},"ValidateForm"),Object(i.b)("p",null,"Fires all fields and record validations in one go, how does it work:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Starts iterating over all the associated fields that have validations defined in the ValidationSchema:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"The validation engine will start sequentially firing the list of validations associated to each field in them form valition schema."),Object(i.b)("li",{parentName:"ul"},"It will stop iterating through all validations associated to each field as same way as ",Object(i.b)("a",l({parentName:"li"},{href:"/api#validatefield"}),"validateField"),"."))),Object(i.b)("li",{parentName:"ul"},"Then, it starts iterating sequentially firing the list of validations associated to each record and it will stop as same way as ",Object(i.b)("a",l({parentName:"li"},{href:"/api#validaterecord"}),"validateRecord"),"."),Object(i.b)("li",{parentName:"ul"},"Once the engine it's done with all fields and records validations it returns the whole result, grouped in two areas:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"An Object containing two keys:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"'fieldErrors': contains an object fieldId/ValidationResult."),Object(i.b)("li",{parentName:"ul"},"'recordErrors': contains an object with recordId/ValidationResult.")))))),Object(i.b)("p",null,"Arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"values"),": all form values (e.g. in a login form, values would be username and password fields).")),Object(i.b)("p",null,"Returns:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#formvalidationresult"}),Object(i.b)("strong",{parentName:"a"},"Promise<FormValidationResult",">")),": Result of firing all the field and record validation results.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"validateForm(values: any): Promise<FormValidationResult>\n")),Object(i.b)("h2",{id:"validaton-result-structures"},"Validaton Result structures"),Object(i.b)("h3",{id:"validationresult"},"ValidationResult"),Object(i.b)("p",null,"A field or record validation function will return a\n",Object(i.b)("em",{parentName:"p"},"ValidationResult")),Object(i.b)("p",null,"Properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"type"),": Validator applied (e.g. required, email, min-length...)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"succeeded"),": Whether if the validation succeeded (true) or failed (false)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"message"),": Error message. Empty if all the validations evaluated succeeded.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string | string[];\n}\n")),Object(i.b)("h3",{id:"recordvalidationresult"},"RecordValidationResult"),Object(i.b)("p",null,"Whenever we validate all form record entries (",Object(i.b)("a",l({parentName:"p"},{href:"/api#validaterecord"}),"ValidateRecord"),"), a ",Object(i.b)("em",{parentName:"p"},"RecordValidationResult")," is returned."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"succeeded"),": Whether if the record validations succeeded (true) or failed (false)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"recordErrors"),": collection of validation results grouped by recordId.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface RecordValidationResult {\n  succeeded: boolean;\n  recordErrors: { [recordId: string]: ValidationResult };\n}\n")),Object(i.b)("h3",{id:"formvalidationresult"},"FormValidationResult"),Object(i.b)("p",null,"Whenever it validates a form with ",Object(i.b)("a",l({parentName:"p"},{href:"/api#validateform"}),"ValidateForm")," (trigger all field and record validations associated to that form) it will return a ",Object(i.b)("em",{parentName:"p"},"FormValidationResult"),"."),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface FormValidationResult {\n  succeeded: boolean;\n  fieldErrors: { [fieldId: string]: ValidationResult };\n  recordErrors: { [recordId: string]: ValidationResult };\n}\n")),Object(i.b)("p",null,"Properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"succeeded"),": Whether if all validations succeeded (true) or any of them failed (false)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"fieldErrors"),": Collection of field ValidationResults grouped by fieldId."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"recordErrors"),": Collections of record ValidationResults grouped by recordId.")),Object(i.b)("h2",{id:"validators"},"Validators"),Object(i.b)("h3",{id:"fieldvalidation-function-type"},"FieldValidation function type"),Object(i.b)("p",null,"FieldValidation function type is the ones used to define field validator functions (for instance a function\nthat validates if a field has been informed, or if it is a valid email). FieldValidation apply to a single field\nalthough is possible that a field validation could read values from another form field (for instance the field ",Object(i.b)("em",{parentName:"p"},"PartnerId"),"\nis required only if the ",Object(i.b)("em",{parentName:"p"},"isPartner")," boolean value is true),"),Object(i.b)("p",null,"Field validator functions must comply with a given signature, in this case, it accepts\ntwo signatures, sync and async."),Object(i.b)("h4",{id:"field-synchronous-validator"},"Field Synchronous Validator"),Object(i.b)("p",null,"Synchronous validator function."),Object(i.b)("p",null,"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#fieldvalidationargs"}),Object(i.b)("strong",{parentName:"a"},"FieldValidatorArgs")),": It passes here information like id of the field\nto validate, actual value, values and customArgs. See ",Object(i.b)("a",l({parentName:"li"},{href:"/api#fieldvalidationargs"}),Object(i.b)("strong",{parentName:"a"},"FieldValidatorArgs")),"\nfor more information.")),Object(i.b)("p",null,"Returned Value"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#validationresult"}),Object(i.b)("strong",{parentName:"a"},"ValidationResult")),": Whether if field validations applied to the selected field\nsucceeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export type FieldValidationFunctionSync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => ValidationResult;\n")),Object(i.b)("h4",{id:"field-asynchronous-validator"},"Field Asynchronous Validator"),Object(i.b)("p",null,"Asynchronous validator function."),Object(i.b)("p",null,"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#fieldvalidationargs"}),Object(i.b)("strong",{parentName:"a"},"FieldValidatorArgs")),": It passes here information like id of the field\nto validate, actual value, values and customArgs. See ",Object(i.b)("a",l({parentName:"li"},{href:"/api#fieldvalidationargs"}),Object(i.b)("strong",{parentName:"a"},"FieldValidatorArgs")),"\nfor more information.")),Object(i.b)("p",null,"Returned Value"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#validationresult"}),Object(i.b)("strong",{parentName:"a"},"Promise<ValidationResult",">")),": Async promise. Once promise is resolved, it returns whether if field validations applied to the selected field succeeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export type FieldValidationFunctionAsync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => Promise<ValidationResult>;\n")),Object(i.b)("h4",{id:"fieldvalidationargs"},"FieldValidationArgs"),Object(i.b)("p",null,Object(i.b)("a",l({parentName:"p"},{href:"/api#fieldvalidation-function-type"}),"FieldValidation")," functions accept as input parameter a ",Object(i.b)("em",{parentName:"p"},"FieldValidationArgs"),",\nthe ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk"}),"fonk")," engine will feed the needed properties to the validator when a field\nvalidation is fired."),Object(i.b)("p",null,"properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"value"),": current value of the field to be evaluated."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"values"),": whole form values (all fields associated to the form)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"customArgs"),": if it need to pass any configuration parameter to the validator (for instance, in a\nmin-length validation the numeric value, or in a password matches another field the id of the field to compare against)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"message"),": you can override the default error(s) message generated by the validators and set your own (for instance\nin a regEx / pattern validation you may want to customize the error message for a credit card field to something like ",Object(i.b)("em",{parentName:"li"},"this is not a\nvalid credit card number")," instead of the generic ",Object(i.b)("em",{parentName:"li"},"Pattern does not match"),").")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface FieldValidatorArgs {\n  value: any;\n  values?: any;\n  customArgs?: any;\n  message?: string | string[];\n}\n")),Object(i.b)("h3",{id:"recordvalidation-function-type"},"RecordValidation function type"),Object(i.b)("p",null,"RecordValidation function type is the one used to define record validator functions. What is a record validator function?\nThese validations are associated to the whole form instead of a single field, for instance: if the total amount\nof your shopping cart is more than 50 USD then you get free shipping, if not warn the user."),Object(i.b)("p",null,"Field validator functions must comply with a given signature, in this case, it accepts\ntwo signatures, sync and async."),Object(i.b)("h4",{id:"record-synchronous-validator"},"Record Synchronous Validator"),Object(i.b)("p",null,"Synchronous validator function."),Object(i.b)("p",null,"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#recordvalidatorargs"}),Object(i.b)("strong",{parentName:"a"},"RecordValidatorArgs")),": It passes here information like values and message. See ",Object(i.b)("a",l({parentName:"li"},{href:"/api#recordvalidatorargs"}),Object(i.b)("strong",{parentName:"a"},"RecordValidatorArgs")),"\nfor more information.")),Object(i.b)("p",null,"Returned Value"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#validationresult"}),Object(i.b)("strong",{parentName:"a"},"ValidationResult")),": Whether if field validations applied to the selected field\nsucceeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export type RecordValidationFunctionSync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => ValidationResult;\n")),Object(i.b)("h4",{id:"record-asynchronous-validator"},"Record Asynchronous Validator"),Object(i.b)("p",null,"Asynchronous validator function."),Object(i.b)("p",null,"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#recordvalidatorargs"}),Object(i.b)("strong",{parentName:"a"},"RecordValidatorArgs")),": It passes here information like values and message. See ",Object(i.b)("a",l({parentName:"li"},{href:"/api#recordvalidatorargs"}),Object(i.b)("strong",{parentName:"a"},"RecordValidatorArgs"))," for more information.")),Object(i.b)("p",null,"Returned Value"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",l({parentName:"li"},{href:"/api#validationresult"}),Object(i.b)("strong",{parentName:"a"},"Promise<ValidationResult",">")),": Async promise. Once promise is resolved, it returns whether if field validations applied to the selected field succeeded or not (in case not, additional information to be provided like id of the validator that failed plus error message).")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export type RecordValidationFunctionAsync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => Promise<ValidationResult>;\n")),Object(i.b)("h4",{id:"recordvalidationargs"},"RecordValidationArgs"),Object(i.b)("p",null,Object(i.b)("a",l({parentName:"p"},{href:"/api#recordvalidation-function-type"}),"RecordValidation")," functions accept as input parameter a ",Object(i.b)("em",{parentName:"p"},"RecordValidationArgs"),",\nthe ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk"}),"fonk")," engine will feed the needed properties to the validator when a record\nvalidation is fired."),Object(i.b)("p",null,"properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"values"),": whole form values (all fields associated to the form)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"message"),": you can override the default error(s) message generated by the record validators and set your own.")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface RecordValidatorArgs {\n  values: any;\n  message?: string | string[];\n}\n")),Object(i.b)("h3",{id:"built-in-validators"},"Built in validators"),Object(i.b)("h5",{id:"required"},"required"),Object(i.b)("p",null,"Succeeds if a field value is informed, fails if the field is not informed (null, undefined, or empty string)."),Object(i.b)("p",null,"Accepts a custom paramater to instruct the validator to trim the incoming values\n(if true a value like ' ' would be treated as an empty string)."),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface RequiredArgs {\n  trim: boolean; // Default value equals true\n}\n\nexport const required: FieldValidationFunctionSync<RequiredArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(i.b)("p",null,"Usage:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Simple, (trim default value equals true):")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required.validator]\n  }\n};\n')),Object(i.b)("p",null,"customArgs"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required.validator],\n    password: [\n      {\n        validator: Validators.required.validator,\n        customArgs: { trim: false }\n      }\n    ]\n  }\n};\n')),Object(i.b)("p",null,"Example:"),Object(i.b)("p",null,"You can find this example in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/required"}),"fonk examples"),"."),Object(i.b)("h5",{id:"email"},"email"),Object(i.b)("p",null,"Succeeds if a field value is a well formed email, fails if not."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(i.b)("em",{parentName:"p"},"required")," validator).")),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export const email: FieldValidationFunctionSync = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(i.b)("p",null,"Usage:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    email: [Validators.email.validator]\n  }\n};\n')),Object(i.b)("p",null,"Example:"),Object(i.b)("p",null,"You can find this example in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/email"}),"fonk examples"),"."),Object(i.b)("h5",{id:"pattern"},"pattern"),Object(i.b)("p",null,"Succeeds if a field matches with a define regex, fails if not. This regular expression can be either a ",Object(i.b)("a",l({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"}),"RegExp")," instance or a string."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(i.b)("em",{parentName:"p"},"required")," validator).")),Object(i.b)("p",null,"Is mandatory to pass the regEx expression to be evaluated."),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface PatternArgs {\n  pattern: string | RegExp;\n}\n\nexport const pattern: FieldValidationFunctionSync<PatternArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(i.b)("p",null,"Usage:"),Object(i.b)("p",null,"String:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern.validator,\n        customArgs: { pattern: "(7|8|9)d{9}" }\n      }\n    ]\n  }\n};\n')),Object(i.b)("p",null,"Regex:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern.validator,\n        customArgs: { pattern: /(7|8|9)\\d{9}/ }\n      }\n    ]\n  }\n};\n')),Object(i.b)("p",null,"Regex constructor:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern.validator,\n        customArgs: { pattern: new Regex(/(7|8|9)\\d{9}/) }\n      }\n    ]\n  }\n};\n')),Object(i.b)("p",null,"Example:"),Object(i.b)("p",null,"You can find this example in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/pattern"}),"fonk examples"),"."),Object(i.b)("h5",{id:"min-length"},"min-length"),Object(i.b)("p",null,"Succeeds if a field length is greater than the one informed in the customArgs.length"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(i.b)("em",{parentName:"p"},"required")," validator).")),Object(i.b)("p",null,"Is mandatory to pass the min length value."),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface LengthArgs {\n  length: number;\n}\n\nexport const minLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(i.b)("p",null,"Sample usage:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength.validator,\n        customArgs: { length: 10 } // Valid description for length greater than 10 chars\n      }\n    ]\n  }\n};\n')),Object(i.b)("p",null,"Example:"),Object(i.b)("p",null,"You can find this example in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/min-length"}),"fonk examples"),"."),Object(i.b)("h5",{id:"max-length"},"max-length"),Object(i.b)("p",null,"Succeeds if a field length is less than the one informed in the customArgs.length"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(i.b)("em",{parentName:"p"},"required")," validator).")),Object(i.b)("p",null,"Is mandatory to pass the max length value."),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface LengthArgs {\n  length: number;\n}\n\nexport const maxLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(i.b)("p",null,"Sample usage:"),Object(i.b)("pre",null,Object(i.b)("code",l({parentName:"pre"},{className:"language-typescript"}),'import { Validators, ValidationSchema } from "@lemoncode/fonk";\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength.validator,\n        customArgs: { length: 200 } // Valid description for length lower than 200 chars\n      }\n    ]\n  }\n};\n')),Object(i.b)("p",null,"Example:"),Object(i.b)("p",null,"You can find this example in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/max-length"}),"fonk examples"),"."),Object(i.b)("h4",{id:"third-party-validators"},"Third party validators:"),Object(i.b)("p",null,"Prior to create a custom validator, check out if there is already one implemented that covers the functionality you need."),Object(i.b)("p",null,"You can find a list of validators in ",Object(i.b)("a",l({parentName:"p"},{href:"/validators/third-party-validators"}),"third party validators"),"."),Object(i.b)("h4",{id:"custom-validators"},"Custom validators"),Object(i.b)("p",null,"A custom validator is a function used for validate a field or record."),Object(i.b)("p",null,"It could use ",Object(i.b)("a",l({parentName:"p"},{href:"/api#field-synchronous-validator"}),"Field Synchronous Validator")," or ",Object(i.b)("a",l({parentName:"p"},{href:"/api#field-asynchronous-validator"}),"Field Asynchronous Validator")," for fields and ",Object(i.b)("a",l({parentName:"p"},{href:"/api#record-synchronous-validator"}),"Record Synchronous Validator")," or ",Object(i.b)("a",l({parentName:"p"},{href:"/api#record-asynchronous-validator"}),"Record Asynchronous Validator")," for records."),Object(i.b)("p",null,"You could see some examples creating custom validators in ",Object(i.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/custom-validators"}),"fonk examples"),"."))}d&&d===Object(d)&&Object.isExtensible(d)&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"api/api.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---api-api-mdx-73be4c598f40c5b2a07a.js.map