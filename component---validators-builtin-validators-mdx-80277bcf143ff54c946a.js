(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{971:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return r})),a.d(t,"default",(function(){return s}));a(11),a(6),a(5),a(3),a(7),a(4),a(9);var n=a(77),i=a(959);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"validators/builtin-validators.mdx"}});var o={_frontmatter:r},c=i.a;function s(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,["components"]);return Object(n.b)(c,l({},o,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"built-in-validators"},"Built in validators"),Object(n.b)("p",null,"Fonk already ships a set of basic validators:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Required: check if a field is be informed (field is not null, undefined or empty string), this can be applied to fields of type ",Object(n.b)("em",{parentName:"li"},"string")," or ",Object(n.b)("em",{parentName:"li"},"number"),"."),Object(n.b)("li",{parentName:"ul"},"Pattern: check if field matches with a given RegExp."),Object(n.b)("li",{parentName:"ul"},"MinLength: check if a string field has a minimum length."),Object(n.b)("li",{parentName:"ul"},"MaxLength: check if a string field has a maximum length."),Object(n.b)("li",{parentName:"ul"},"Email: check if a string field is a well formed email address.")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"If you want to customize the error messages that this validators provide by default, check the ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/messages/error-message"}),"error-message")," and ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/messages/internationalization"}),"internazionalization"))),Object(n.b)("h2",{id:"required"},"Required"),Object(n.b)("p",null,"Check if a field is be informed (field is not null, undefined or empty string), this can be applied to fields of type ",Object(n.b)("em",{parentName:"p"},"string")," or ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"It accepts a custom parameter to instruct the validator to trim the incoming values\n(if true a value like ' ' would be treated as an empty string)."),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface RequiredArgs {\n  trim: boolean; // Default value equals true\n}\n\nexport const required: FieldValidationFunctionSync<RequiredArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(n.b)("p",null,"Usage:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Simple, (trim default value equals true):")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required.validator],\n  },\n};\n")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"With customArgs")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required.validator],\n    password: [\n      {\n        validator: Validators.required.validator,\n        customArgs: { trim: false },\n      },\n    ],\n  },\n};\n")),Object(n.b)("p",null,"Example:"),Object(n.b)("p",null,"You can find this example in ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/required"}),"Javascript")," and ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/required"}),"Typescript"),"."),Object(n.b)("h2",{id:"pattern"},"Pattern"),Object(n.b)("p",null,"Succeeds if a field matches with a defined ",Object(n.b)("strong",{parentName:"p"},"RegExp"),", fails if not. This regular expression can be either a ",Object(n.b)("a",l({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"}),"RegExp")," instance or a string."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(n.b)("em",{parentName:"p"},"required")," validator).")),Object(n.b)("p",null,"Is mandatory to pass the RegExp expression to be evaluated."),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface PatternArgs {\n  pattern: string | RegExp;\n}\n\nexport const pattern: FieldValidationFunctionSync<PatternArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(n.b)("p",null,"Usage:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"String:")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern.validator,\n        customArgs: { pattern: '^(7|8|9)\\\\d{9}$' },\n      },\n    ],\n  },\n};\n")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"RegExp:")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern.validator,\n        customArgs: { pattern: /^(7|8|9)\\d{9}$/ },\n      },\n    ],\n  },\n};\n")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"RegExp constructor:")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern.validator,\n        customArgs: { pattern: new RegExp(/^(7|8|9)\\d{9}$/) },\n      },\n    ],\n  },\n};\n")),Object(n.b)("p",null,"Example:"),Object(n.b)("p",null,"You can find this example in ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/pattern"}),"Javascript")," and ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/pattern"}),"Typescript"),"."),Object(n.b)("h2",{id:"minlength"},"MinLength"),Object(n.b)("p",null,"Succeeds if a field length is greater than the one informed in the customArgs.length"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(n.b)("em",{parentName:"p"},"required")," validator).")),Object(n.b)("p",null,"Is mandatory to pass the min length value."),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface LengthArgs {\n  length: number;\n}\n\nexport const minLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(n.b)("p",null,"Usage:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength.validator,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n      },\n    ],\n  },\n};\n")),Object(n.b)("p",null,"Custom message with interpolated ",Object(n.b)("inlineCode",{parentName:"p"},"customArgs"),":"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength.validator,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n        message: 'The min length is {{length}}',\n      },\n    ],\n  },\n};\n")),Object(n.b)("p",null,"Example:"),Object(n.b)("p",null,"You can find this example in ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/min-length"}),"Javascript")," and ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/min-length"}),"Typescript"),"."),Object(n.b)("h2",{id:"maxlength"},"MaxLength"),Object(n.b)("p",null,"Succeeds if a field length is lower than the one informed in the customArgs.length"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(n.b)("em",{parentName:"p"},"required")," validator).")),Object(n.b)("p",null,"Is mandatory to pass the max length value."),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export interface LengthArgs {\n  length: number;\n}\n\nexport const maxLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(n.b)("p",null,"Usage:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength.validator,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n      },\n    ],\n  },\n};\n")),Object(n.b)("p",null,"Custom message with interpolated ",Object(n.b)("inlineCode",{parentName:"p"},"customArgs"),":"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength.validator,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n        message: 'The max length is {{length}}',\n      },\n    ],\n  },\n};\n")),Object(n.b)("p",null,"Example:"),Object(n.b)("p",null,"You can find this example in ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/max-length"}),"Javascript")," and ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/max-length"}),"Typescript"),"."),Object(n.b)("h2",{id:"email"},"Email"),Object(n.b)("p",null,"Succeeds if a field value is a well formed email, fails if not."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(n.b)("em",{parentName:"p"},"required")," validator).")),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"export const email: FieldValidationFunctionSync = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(n.b)("p",null,"Usage:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    email: [Validators.email.validator],\n  },\n};\n")),Object(n.b)("p",null,"Example:"),Object(n.b)("p",null,"You can find this example in ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/email"}),"Javascript")," and ",Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/email"}),"Typescript"),"."),Object(n.b)("h2",{id:"more-validators"},"More validators"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Fonk")," only ships with a minimal subset of validators to avoid adding extra weight to the library with other validators that you may not use."),Object(n.b)("p",null,"If you are in the need of using / implementing other validators:"),Object(n.b)("p",null,"- You have an available list of microlibraries that implement a wide set of validators, allowing you to cherry pick the validators that you really need avoding extra weight into your application adding validators that you don't need. You can find a list of third party validators in the following ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/validators/third-party-validators"}),"link"),"."),Object(n.b)("p",null,"- You can implement your own custom validator, is quite easy, you can find instructions about how to build your own custom validation in these links: ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-sync"}),"sync custom validators")," and ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-async"}),"async custom validators"),"."))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"validators/builtin-validators.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---validators-builtin-validators-mdx-80277bcf143ff54c946a.js.map