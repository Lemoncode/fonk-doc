(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{967:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return r})),t.d(a,"default",(function(){return c}));t(12),t(5),t(6),t(3),t(7),t(4),t(9);var n=t(77),l=t(958);function i(){return(i=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}var r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"general/getting-started.mdx"}});var o={_frontmatter:r},s=l.a;function c(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(n.b)(s,i({},o,t,{components:a,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"getting-started"},"Getting Started"),Object(n.b)("h2",{id:"installation"},"Installation"),Object(n.b)("p",null,"Getting started with ",Object(n.b)("a",i({parentName:"p"},{href:"https://github.com/Lemoncode/fonk"}),Object(n.b)("strong",{parentName:"a"},"Fonk"))," is something really easy and quick. First of all you will need to install ",Object(n.b)("strong",{parentName:"p"},"Fonk")," in your existing project using your favorite package manager (we'll assume npm for this example)."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),"npm install @lemoncode/fonk --save\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"Fonk")," is Typescript friendly, typing definitions are already included in the main package.")),Object(n.b)("h2",{id:"using"},"Using"),Object(n.b)("p",null,"Fonk is framework agnostic, let's start by adding some simple code to define a login validation:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'const loginRecord = {\n  user: "",\n  password: ""\n};\n')),Object(n.b)("p",null,"Let's define the following validation schema for this form:"),Object(n.b)("p",null,"- User field is mandatory."),Object(n.b)("p",null,"- Password field is mandatory."),Object(n.b)("p",null,"Now let's create the validation schema:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'import { Validators, createFormValidation } from "@lemoncode/fonk";\n\nconst validationSchema = {\n  field: {\n    user: [Validators.required.validator],\n    password: [Validators.required.validator]\n  }\n};\n\nconst formValidation = createFormValidation(validationSchema);\n')),Object(n.b)("p",null,"And let's fire a field validation (usually we will fire this in the ",Object(n.b)("em",{parentName:"p"},"onChange")," or ",Object(n.b)("em",{parentName:"p"},"onBlur")," event of every HTML field):"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'formValidation\n  .validateField("user", loginRecord.user)\n  .then(validationResult => {\n    console.log(validationResult);\n  });\n')),Object(n.b)("p",null,"In this case we get the following result (validation failed):"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'{\n  succeeded: false,\n  message: "Please fill in this mandatory field.",\n  type: "REQUIRED"\n}\n')),Object(n.b)("p",null,"What happens if we feed the login.user field with data?"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'loginRecord.user = "John";\n')),Object(n.b)("p",null,"And we fire again the field valdation"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'formValidation\n  .validateField("user", loginRecord.user)\n  .then(validationResult => {\n    console.log(validationResult);\n  });\n')),Object(n.b)("p",null,"We get the following result (validation succeeded):"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'{\n  succeeded: true,\n  message: "",\n  type: "REQUIRED"\n}\n')),Object(n.b)("p",null,"If you want to fire all the form validations in one go, you can execute ",Object(n.b)("em",{parentName:"p"},"validateAll")),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-javascript"}),"formValidation.validateForm(loginRecord).then(validationResult => {\n  console.log(validationResult);\n});\n")),Object(n.b)("p",null,"And you will get the result of firing all defined validations in the schema:"),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-bash"}),'{\n  succeeded: false,\n  fieldErrors: {\n    user: {\n      succeeded: true,\n      message: "",\n      type: "REQUIRED"\n    },\n    password: {\n      succeeded: false,\n      message: "Please fill in this mandatory field.",\n      type: "REQUIRED"\n    },\n  },\n  recordErrors: {}\n}\n')),Object(n.b)("h2",{id:"ui-examples"},"UI Examples"),Object(n.b)("p",null,"You can play with this example in the following ",Object(n.b)("a",i({parentName:"p"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/getting-started"}),"codesandbox"),"."),Object(n.b)("p",null,"If you want to check a full example including user interface interaction, check the following examples:"),Object(n.b)("p",null,"- No framework example: ",Object(n.b)("a",i({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/vanilla"}),"Examples in Javascript and Typescript")),Object(n.b)("p",null,"- React + React Final Forms: ",Object(n.b)("a",i({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/react-final-form"}),"Examples in Javascript and Typescript")),Object(n.b)("h2",{id:"next-steps"},"Next steps"),Object(n.b)("p",null,"Now you many questions will be arising in your head:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Can I define more than one field validation per field?"),Object(n.b)("li",{parentName:"ul"},"Where can I find more validations (we call this ",Object(n.b)("em",{parentName:"li"},"validators"),")."),Object(n.b)("li",{parentName:"ul"},"How can I create my custom ",Object(n.b)("em",{parentName:"li"},"validator"),"?"),Object(n.b)("li",{parentName:"ul"},"What about asynchronous validations?"),Object(n.b)("li",{parentName:"ul"},"And global form validations (we call them record level validations)?"),Object(n.b)("li",{parentName:"ul"},"Does it integrate well with libraries like React Final Form?"),Object(n.b)("li",{parentName:"ul"},"What about multilanguage support?")),Object(n.b)("p",null,"All this cases are covered by the library, let's jump into the next topic\n",Object(n.b)("a",i({parentName:"p"},{href:"./validation-schema"}),"Validation Schema")))}c&&c===Object(c)&&Object.isExtensible(c)&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"general/getting-started.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---general-getting-started-mdx-f5aa046646472f1639c1.js.map