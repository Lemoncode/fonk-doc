{"version":3,"sources":["webpack:///../general/validating-record.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+bAMO,IAAMA,EAAe,Q,8KAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,uLACqD,kBAAIC,WAAW,KAAf,UADrD,kEAEwB,mBAAGA,WAAW,KAAQ,CAC1C,KAAQ,iCACP,sBAAQA,WAAW,KAAnB,mBAJL,IAIgE,mBAAGA,WAAW,KAAQ,CAClF,KAAQ,iCACP,sBAAQA,WAAW,KAAnB,mBANL,YAOA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mEAIL,6DACA,sBACE,kBAAIA,WAAW,MAAf,+FAEF,uCACA,sBACE,kBAAIA,WAAW,MAAf,gHACA,kBAAIA,WAAW,MAAf,iFAEF,8BACE,iBAAGA,WAAW,cAAd,iCAA6D,mBAAGA,WAAW,KAAQ,CAC/E,KAAQ,gCADiD,iBAA7D,sLAKF,8BACE,iBAAGA,WAAW,cAAd,8DAA0F,mBAAGA,WAAW,KAAQ,CAC5G,KAAQ,iCAD8E,kBAA1F,OAIF,gDACA,oGAAmF,kBAAIA,WAAW,KAAf,kBAAnF,iEAEA,8DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sGASL,yDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iUAcL,8BACE,iBAAGA,WAAW,cAAd,oDAAgF,mBAAGA,WAAW,KAAQ,CAClG,KAAQ,iDADoE,QAAhF,MAIF,qEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0LAUL,6FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gIAML,qDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+OAaL,4LACA,0FAAyE,kBAAIA,WAAW,KAAf,kBAAzE,4CAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mCAIL,2DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gIAML,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+KAaL,yDACA,kCACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mGADQ,oBAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,mGADQ,oBAApB,MAIF,mDACA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4GADQ,+BAApB,KAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,4GADQ,+BAApB,MAIF,2IAC6C,mBAAGA,WAAW,KAAQ,CAC/D,KAAQ,8BADiC,sB,qKAOjDJ,EAAWK,gBAAiB","file":"component---general-validating-record-mdx-b535940bd9655796b7b1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"record-validations\"\n    }}>{`Record Validations`}</h1>\n    <p>{`Field validations are great, but sometimes we need to fire validations once the user has fulfilled all\nthe form values (typically just when the user hits the `}<em parentName=\"p\">{`submit`}</em>{` button), how can we fire this kind\nof validations? using the `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#formvalidation\"\n      }}><strong parentName=\"a\">{`FormValidation`}</strong></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validaterecord\"\n      }}><strong parentName=\"a\">{`validateRecord`}</strong></a>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`validateRecord(values: any): Promise<RecordValidationResult>\n`}</code></pre>\n    <p>{`In this method we pass as arguments:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`All the record values, usually this kind of validation need access to the whole form data.`}</li>\n    </ul>\n    <p>{`And it returns`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Whether all the associated record validations passed or failed (in case just one of the validations failed).`}</li>\n      <li parentName=\"ul\">{`A list of results including the result of firing all the record validations.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This behavior is different to `}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/api#validatefield\"\n        }}>{`ValidateField`}</a>{`, because validate field is ove one field, validateRecord is over a list of records. you get success or stops the process\nFor each record has same behaviour like validateField.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can find detailed information about this method in the `}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/api#validaterecord\"\n        }}>{`api definition`}</a>{`).`}</p>\n    </blockquote>\n    <p>{`Let's get our hand wet:`}</p>\n    <p>{`We want to validate that, the user gets freeshipping if he is subscribed to `}<em parentName=\"p\">{`prime services`}</em>{` or\nif the the total amount purchase is greater than 30 USD.`}</p>\n    <p>{`Let's start with the following model:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const checkoutForm = {\n  product: \"shoes\",\n  price: 20,\n  discount: 5,\n  isPrime: false\n};\n`}</code></pre>\n    <p>{`Let's define a Record Validator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const freeShippingRecordValidator = ({ values }) => {\n  const succeeded = values.isPrime || values.price - values.discount > 20;\n\n  return {\n    succeeded,\n    message: succeeded\n      ? \"\"\n      : \"Subscribe to prime service or total must be greater than 20USD\",\n    type: \"RECORD_FREE_SHIPPING\"\n  };\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`More information about record validators in this `}<a parentName=\"p\" {...{\n          \"href\": \"/fonk-doc/api#recordvalidation-function-type\"\n        }}>{`link`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`And let's define our form validation schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validationSchema = {\n  record: {\n    freeShipping: [freeShippingRecordValidator]\n  }\n};\n\nconst formValidation: FormValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`Now if we want fire the form record validation we only need to call:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`formValidation.validateRecord(checkoutForm).then(recordValidationResult => {\n  console.log(recordValidationResult);\n});\n`}</code></pre>\n    <p>{`In this case it will return:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"succeeded\": false,\n  \"recordErrors\": {\n    \"freeShipping\": {\n      \"succeeded\": false,\n      \"message\": \"Subscribe to prime service or total must be greater than 20USD\",\n      \"type\": \"RECORD_FREE_SHIPPING\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The record validation failed, we can show a message to the user asking to subscribe to prime services or adding more items to his basket to get free shipping cost.`}</p>\n    <p>{`If we update the values of the form, e.g. the user has contracted `}<em parentName=\"p\">{`prime services`}</em>{` it will return\na validation succeeded.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`checkoutForm.isPrime = true;\n`}</code></pre>\n    <p>{`And we fire the record validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`formValidation.validateRecord(checkoutForm).then(recordValidationResult => {\n  console.log(recordValidationResult);\n});\n`}</code></pre>\n    <p>{`It will return:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"succeeded\": true,\n  \"recordErrors\": {\n    \"freeShipping\": {\n      \"succeeded\": true,\n      \"message\": \"\",\n      \"type\": \"RECORD_FREE_SHIPPING\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The record validation succeeded.`}</p>\n    <p>{`Examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-record\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/validate-record\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n    </ul>\n    <p>{`React final form examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/validate-record\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/validate-record\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <p>{`Now that you know how to fire validate field & record validations \nlet's jump firing all the validation toghether `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validating-form\"\n      }}>{`form validations`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}