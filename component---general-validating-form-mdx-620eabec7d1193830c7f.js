(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{Hwer:function(e,t,a){e.exports=a.p+"static/validate-field-record-and-form-68deb0516130b231e7f7c8817ef17798.gif"},x59w:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return s}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk");var n=a("/FXl"),r=a("TjRS");a("aD51");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"general/validating-form.mdx"}});var o={_frontmatter:i},c=r.a;function s(e){var t=e.components,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(c,l({},o,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"form-validation"},"Form Validation"),Object(n.b)("p",null,"We have learned so far how to fire single field validations and record validations, but under some\nscenarios we need to execute all associated fields validations plus record validations, for instance\nbefore hitting the ",Object(n.b)("em",{parentName:"p"},"submit")," button you want to ensure everything is ok."),Object(n.b)("p",null,Object(n.b)("a",l({parentName:"p"},{href:"https://github.com/Lemoncode/fonk"}),Object(n.b)("strong",{parentName:"a"},"Fonk"))," ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/api#formvalidation"}),Object(n.b)("strong",{parentName:"a"},"FormValidation"))," includes a method just for that, it's called ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/api#validateform"}),Object(n.b)("strong",{parentName:"a"},"validateForm"))),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-typescript"}),"validateForm(values: any): Promise<FormValidationResult>\n")),Object(n.b)("p",null,"In this method we pass as arguments"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"All the form values.")),Object(n.b)("p",null,"And it returns"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Whether all the validations succeeded or not."),Object(n.b)("li",{parentName:"ul"},"An object containing a key per field, each key maps to a ",Object(n.b)("a",l({parentName:"li"},{href:"/fonk-doc/api#validationresult"}),"ValidationResult")," object."),Object(n.b)("li",{parentName:"ul"},"An object contains a key per record validation, each key maps to a ",Object(n.b)("a",l({parentName:"li"},{href:"/fonk-doc/api#validationresult"}),"ValidationResult")," object.")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"You can check the validateForm formal specs in this ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/api#validateform"}),"api link"),".")),Object(n.b)("p",null,"Let's get our hands wet:"),Object(n.b)("p",null,"We have the following form model:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const checkoutForm = {\n  product: '',\n  discount: null,\n  price: null,\n  isPrime: false,\n};\n")),Object(n.b)("p",null,"We want to apply the following validations to the form:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Fields ",Object(n.b)("em",{parentName:"li"},"product"),", ",Object(n.b)("em",{parentName:"li"},"price"),", ",Object(n.b)("em",{parentName:"li"},"discount"),", are required fields"),Object(n.b)("li",{parentName:"ul"},"We get ",Object(n.b)("em",{parentName:"li"},"Freeshipping")," if ",Object(n.b)("em",{parentName:"li"},"isPrime")," is true\nor if ",Object(n.b)("em",{parentName:"li"},"price - discount")," is greater than 20 USD.")),Object(n.b)("p",null,"Let's define first the freeshipping record validation:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"const freeShippingRecordValidator = ({ values }) => {\n  const succeeded = values.isPrime || values.price - values.discount > 20;\n\n  return {\n    succeeded,\n    message: succeeded\n      ? ''\n      : 'Subscribe to prime service or total must be greater than 20USD',\n    type: 'RECORD_FREE_SHIPPING',\n  };\n};\n")),Object(n.b)("p",null,"Let's define the form schema validation and instantiate our FormValidation object:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),"import { createFormValidation, Validators } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    product: [Validators.required],\n    discount: [Validators.required],\n    price: [Validators.required],\n  },\n  record: {\n    freeShipping: [freeShippingRecordValidator],\n  },\n};\n\nconst formValidation = createFormValidation(validationSchema);\n")),Object(n.b)("p",null,"If we execute the formValidation it will return:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'formValidation.validateForm(checkoutForm).then(formValidationResult => {\n  console.log(formValidationResult);\n});\n\n// Result\n{\n  "succeeded": false,\n  "fieldErrors": {\n    "product": {\n      "succeeded": false,\n      "message": "Please fill in this mandatory field.",\n      "type": "REQUIRED"\n    },\n    "discount": {\n      "succeeded": true,\n      "message": "",\n      "type": "REQUIRED"\n    },\n    "price": {\n      "succeeded": true,\n      "message": "",\n      "type": "REQUIRED"\n    }\n  },\n  "recordErrors": {\n    "freeShipping": {\n      "succeeded": false,\n      "message": "Subscribe to prime service or total must be greater than 20USD",\n      "type": "RECORD_FREE_SHIPPING"\n    }\n  }\n}\n')),Object(n.b)("p",null,"If we update the values of the form to the following entries"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-diff"}),"const checkoutForm = {\n- product: '',\n+ product: 'a',\n- discount: null,\n+ discount: 5,\n- price: null,\n+ price: 20,\n- isPrime: false,\n+ isPrime: true,\n};\n")),Object(n.b)("p",null,"It will return succeed:"),Object(n.b)("pre",null,Object(n.b)("code",l({parentName:"pre"},{className:"language-javascript"}),'{\n  "succeeded": true,\n  "fieldErrors": {\n    "product": {\n      "succeeded": true,\n      "message": "",\n      "type": "REQUIRED"\n    },\n    "discount": {\n      "succeeded": true,\n      "message": "",\n      "type": "REQUIRED"\n    },\n    "price": {\n      "succeeded": true,\n      "message": "",\n      "type": "REQUIRED"\n    }\n  },\n  "recordErrors": {\n    "freeShipping": {\n      "succeeded": true,\n      "message": "",\n      "type": "RECORD_FREE_SHIPPING"\n    }\n  }\n}\n')),Object(n.b)("p",null,Object(n.b)("img",{alt:"validate-field-record-and-form",src:a("Hwer")})),Object(n.b)("p",null,"Examples:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-field-record-and-form"}),"Plain Vanilla JS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/validate-field-record-and-form"}),"Plain Vanilla TS"),".")),Object(n.b)("p",null,"React final form examples:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/validate-field-record-and-form"}),"React + React Final Form JS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/validate-field-record-and-form"}),"React + React Final Form TS"),".")),Object(n.b)("p",null,"Vuejs examples:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",l({parentName:"li"},{href:"https://codesandbox.io/s/github/Lemoncode/fonk/tree/master/examples/vue/js/validate-field-record-and-form"}),"Vuejs JS"))),Object(n.b)("p",null,"You have mastered the basics about how to define a validation schema and\nfire validations, it's time to jump into a very interesting topic ",Object(n.b)("a",l({parentName:"p"},{href:"/fonk-doc/validators/builtin-validators"}),"Validators"),"."))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"general/validating-form.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---general-validating-form-mdx-620eabec7d1193830c7f.js.map