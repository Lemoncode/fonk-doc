(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{Jwox:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return i})),t.d(a,"default",(function(){return m}));var n=t("Fcif"),o=t("+I+c"),r=t("/FXl"),l=t("TjRS"),i=(t("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"messages/error-message.mdx"}});var s={_frontmatter:i},c=l.a;function m(e){var a=e.components,l=Object(o.a)(e,["components"]);return Object(r.b)(c,Object(n.a)({},s,l,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"customizing-error-messages"},"Customizing error messages"),Object(r.b)("p",null,"When a given validation fails, a Fonk validator returns a default error message, this messages can be overriden\nin two ways:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"You can customize the error message(s) returned by a single validator in a global way (any validation\nschema using this validator will just use this new error message).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"You can customize the error message for a single field or record validation in a given validation schema."))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Additionally ",Object(r.b)("em",{parentName:"p"},"Validators")," return the TYPE of validator executed (TYPE is a unique identifier) and whether it succeed or not.")),Object(r.b)("p",null,"In which scenarios you will choose whether to globally or locally?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'Globally customizing a validator error message can be quite useful to provide multilanguage support, e.g.: a\ngiven user changes the language from English to Spanish, then you want RequiredFieldValidator error message\nto be updated from "This Field is required" to "Debe informar el campo", this should be applied to all\nvalidationSchemas field entries that are using this validator.')),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Setting up a field level validation can be useful for wide validators like ",Object(r.b)("em",{parentName:"p"},"Pattern")," validators: this validator\nvalidates the entered text against a regular expression, let's say you use this validator to validate an\nIBAN number, and in another field you just validate a BIC number, you don't want to display a generic\n'Pattern is not valid' message, you want to display a message like \"Invalid IBAN number\" and \"Invalid BIC number\"\nfor each of the fields."))),Object(r.b)("h1",{id:"global-error-message-customization"},"Global error message customization"),Object(r.b)("p",null,"We will take as example ",Object(r.b)("em",{parentName:"p"},"required validator"),", at the entry point of our application we need to add the following\ncode:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    // The default error message is:\n    // \"Please fill in this mandatory field.\"\n    user: [Validators.required],\n  },\n};\n\nconst formValidation = createFormValidation(validationSchema);\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Update error message using globally way:")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-diff"}),'import { Validators, createFormValidation } from \'@lemoncode/fonk\';\n\n+ // Spanish message\n+ Validators.required.setErrorMessage("Debe informar el campo");\n\nconst validationSchema = {\n  field: {\n    // The default error message is:\n    // "Please fill in this mandatory field."\n    user: [Validators.required],\n  },\n};\n\nconst formValidation = createFormValidation(validationSchema);\n')),Object(r.b)("p",null,Object(r.b)("img",{alt:"global-error-message",src:t("OtFg")})),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/vanilla/global-error-message"}),"Plain Vanilla JS"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/vanilla/global-error-message"}),"Plain Vanilla TS"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/react-final-form/global-error-message"}),"React + React Final Form JS"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/react-final-form/global-error-message"}),"React + React Final Form TS"),".")),Object(r.b)("h1",{id:"validationschema-field-validation-customization"},"ValidationSchema field validation customization"),Object(r.b)("p",null,"We will take as example ",Object(r.b)("em",{parentName:"p"},"pattern validator"),", we will setup a validation schema and customize the error\nmessage for the ",Object(r.b)("em",{parentName:"p"},"IBAN")," field and the ",Object(r.b)("em",{parentName:"p"},"BIC")," field"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    ibanAccount: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^ES\\d*$/ },\n      },\n    ],\n    bicAccount: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^BIC\\d*$/ },\n      },\n    ],\n  },\n};\n\nconst formValidation = createFormValidation(validationSchema);\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Update error message using locally way:")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-diff"}),"import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    ibanAccount: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^ES\\d*$/ },\n+       message: 'Invalid IBAN number',\n      },\n    ],\n    bicAccount: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^BIC\\d*$/ },\n+       message: 'Invalid BIC number',\n      },\n    ],\n  },\n};\n\nconst formValidation = createFormValidation(validationSchema);\n")),Object(r.b)("p",null,Object(r.b)("img",{alt:"local-error-message",src:t("vX1m")})),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/vanilla/local-error-message"}),"Plain Vanilla JS"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/vanilla/local-error-message"}),"Plain Vanilla TS"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/react-final-form/local-error-message"}),"React + React Final Form JS"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/react-final-form/local-error-message"}),"React + React Final Form TS"),".")),Object(r.b)("h1",{id:"building-a-custom-validator-that-support-error-messages-customization"},"Building a custom validator that support error messages customization."),Object(r.b)("p",null,"Check the sections ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-sync"}),"Custom Validators"),", to find how to customize error message."),Object(r.b)("p",null,"Check the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/api"}),"api"),", for more information"))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"messages/error-message.mdx"}}),m.isMDXComponent=!0},OtFg:function(e,a,t){e.exports=t.p+"static/global-error-message-1acbf53cf036106415b20a1fefa7b96d.gif"},vX1m:function(e,a,t){e.exports=t.p+"static/local-error-message-e721bc9a59dd713f8410ccf9294e2d2f.gif"}}]);
//# sourceMappingURL=component---messages-error-message-mdx-497cca4906a18686091c.js.map