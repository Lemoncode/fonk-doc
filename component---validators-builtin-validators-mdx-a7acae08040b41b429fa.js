(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{QKKz:function(e,t,a){e.exports=a.p+"static/pattern-aafa785f6e9775b2f30e6c272cd56079.gif"},Rz1j:function(e,t,a){e.exports=a.p+"static/array-shopping-cart-validation-32fb9f9483ead846c0c24b5a6507431b.gif"},Z4GV:function(e,t,a){e.exports=a.p+"static/max-length-714dbd1b2cc2a2437fc7f2ea05748311.gif"},nJ1Q:function(e,t,a){e.exports=a.p+"static/email-b80b17992bd3801ec4c2459796903663.gif"},rSa3:function(e,t,a){e.exports=a.p+"static/required-027af8940307dd96b2696949ac55cc99.gif"},sA0m:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return b}));var n=a("Fcif"),i=a("+I+c"),l=a("/FXl"),r=a("TjRS"),o=(a("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"validators/builtin-validators.mdx"}});var c={_frontmatter:o},s=r.a;function b(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(l.b)(s,Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"built-in-validators"},"Built in validators"),Object(l.b)("p",null,"Fonk already ships a set of basic validators:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Required: check if a field is informed (field is not null, undefined or empty string), this can be applied to fields of type ",Object(l.b)("em",{parentName:"li"},"string")," or ",Object(l.b)("em",{parentName:"li"},"number"),"."),Object(l.b)("li",{parentName:"ul"},"Pattern: check if field matches with a given RegExp."),Object(l.b)("li",{parentName:"ul"},"MinLength: check if a string field has a minimum length."),Object(l.b)("li",{parentName:"ul"},"MaxLength: check if a string field has a maximum length."),Object(l.b)("li",{parentName:"ul"},"Email: check if a string field is a well formed email address."),Object(l.b)("li",{parentName:"ul"},"Array: adds validation support to form array fields.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"If you want to customize the error messages that this validators provide by default, check the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/messages/error-message"}),"error-message")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/messages/internationalization"}),"internationalization"))),Object(l.b)("h2",{id:"required"},"Required"),Object(l.b)("p",null,"Check if a field is informed (field is not null, undefined or empty string), this can be applied to fields of type ",Object(l.b)("em",{parentName:"p"},"string")," or ",Object(l.b)("em",{parentName:"p"},"number"),"."),Object(l.b)("p",null,"It accepts a custom parameter to instruct the validator to trim the incoming values\n(if true a value like ' ' would be treated as an empty string)."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export interface RequiredArgs {\n  trim: boolean; // Default value equals true\n}\n\nexport const required: FieldValidationFunctionSync<RequiredArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(l.b)("p",null,"Usage:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Simple, (trim default value equals true):")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required],\n  },\n};\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"With customArgs")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    login: [Validators.required],\n    password: [\n      {\n        validator: Validators.required,\n        customArgs: { trim: false },\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,Object(l.b)("img",{alt:"required",src:a("rSa3")})),Object(l.b)("p",null,"Example:"),Object(l.b)("p",null,"You can find this example in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/required"}),"Javascript")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/required"}),"Typescript"),"."),Object(l.b)("h2",{id:"pattern"},"Pattern"),Object(l.b)("p",null,"Succeeds if a field matches with a defined ",Object(l.b)("strong",{parentName:"p"},"RegExp"),", fails if not. This regular expression can be either a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"}),"RegExp")," instance or a string."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(l.b)("em",{parentName:"p"},"required")," validator).")),Object(l.b)("p",null,"Is mandatory to pass the RegExp expression to be evaluated."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export interface PatternArgs {\n  pattern: string | RegExp;\n}\n\nexport const pattern: FieldValidationFunctionSync<PatternArgs> =\n(fieldValidatorArgs): ValidationResult => {...}\n")),Object(l.b)("p",null,"Usage:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"String:")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: '^(7|8|9)\\\\d{9}$' },\n      },\n    ],\n  },\n};\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"RegExp:")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: /^(7|8|9)\\d{9}$/ },\n      },\n    ],\n  },\n};\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"RegExp constructor:")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    phone: [\n      {\n        validator: Validators.pattern,\n        customArgs: { pattern: new RegExp(/^(7|8|9)\\d{9}$/) },\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,Object(l.b)("img",{alt:"pattern",src:a("QKKz")})),Object(l.b)("p",null,"Example:"),Object(l.b)("p",null,"You can find this example in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/pattern"}),"Javascript")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/pattern"}),"Typescript"),"."),Object(l.b)("h2",{id:"minlength"},"MinLength"),Object(l.b)("p",null,"Succeeds if a field length is greater than the one informed in the customArgs.length"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(l.b)("em",{parentName:"p"},"required")," validator).")),Object(l.b)("p",null,"Is mandatory to pass the min length value."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export interface LengthArgs {\n  length: number;\n}\n\nexport const minLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(l.b)("p",null,"Usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,"Custom message with interpolated ",Object(l.b)("inlineCode",{parentName:"p"},"customArgs"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.minLength,\n        customArgs: { length: 10 }, // Valid description for length greater than 10 chars\n        message: 'The min length is {{length}}',\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,Object(l.b)("img",{alt:"min-length",src:a("yhms")})),Object(l.b)("p",null,"Example:"),Object(l.b)("p",null,"You can find this example in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/min-length"}),"Javascript")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/min-length"}),"Typescript"),"."),Object(l.b)("h2",{id:"maxlength"},"MaxLength"),Object(l.b)("p",null,"Succeeds if a field length is lower than the one informed in the customArgs.length"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(l.b)("em",{parentName:"p"},"required")," validator).")),Object(l.b)("p",null,"Is mandatory to pass the max length value."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export interface LengthArgs {\n  length: number;\n}\n\nexport const maxLength: FieldValidationFunctionSync<LengthArgs> = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(l.b)("p",null,"Usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,"Custom message with interpolated ",Object(l.b)("inlineCode",{parentName:"p"},"customArgs"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    description: [\n      {\n        validator: Validators.maxLength,\n        customArgs: { length: 20 }, // Valid description for length lower than 20 chars\n        message: 'The max length is {{length}}',\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,Object(l.b)("img",{alt:"max-length",src:a("Z4GV")})),Object(l.b)("p",null,"Example:"),Object(l.b)("p",null,"You can find this example in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/max-length"}),"Javascript")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/max-length"}),"Typescript"),"."),Object(l.b)("h2",{id:"email"},"Email"),Object(l.b)("p",null,"Succeeds if a field value is a well formed email, fails if not."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"If the string is empty it won't fail (to cover this case use the ",Object(l.b)("em",{parentName:"p"},"required")," validator).")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export const email: FieldValidationFunctionSync = (fieldValidatorArgs) : ValidationResult => {...}\n")),Object(l.b)("p",null,"Usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Validators, ValidationSchema } from '@lemoncode/fonk';\n\nconst validationSchema: ValidationSchema = {\n  field: {\n    email: [Validators.email],\n  },\n};\n")),Object(l.b)("p",null,Object(l.b)("img",{alt:"email",src:a("nJ1Q")})),Object(l.b)("p",null,"Example:"),Object(l.b)("p",null,"You can find this example in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/js/email"}),"Javascript")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Lemoncode/fonk/tree/master/examples/docs/api/ts/email"}),"Typescript"),"."),Object(l.b)("h2",{id:"array"},"Array"),Object(l.b)("p",null,"This validator allows you to add support to validation to array form fields, it works as an inception,\nyou get the fonk engine embedded into that array, ",Object(l.b)("em",{parentName:"p"},"e.g. you got a shopping cart list and you want\nto validate that each Quantity field on each row is informed and is a valid number"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export interface ArrayArgs {\n  field: FieldValidationSchema;\n}\n\nexport const validator: FieldValidationFunctionAsync = validatorArgs => {\n")),Object(l.b)("p",null,"Usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-Javascript"}),"const validationSchema = {\n  field: {\n    products: [\n      {\n        validator: Validators.array,\n        customArgs: {\n          field: {\n            name: [Validators.required],\n            quantity: [Validators.required, isNumber],\n            price: [Validators.required, isNumber],\n          },\n        },\n      },\n    ],\n  },\n};\n")),Object(l.b)("p",null,Object(l.b)("img",{alt:"array-shopping-cart-validation",src:a("Rz1j")})),Object(l.b)("h2",{id:"more-validators"},"More validators"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Fonk")," only ships with a minimal subset of validators to avoid adding extra weight to the library with other validators that you may not use."),Object(l.b)("p",null,"If you are in the need of using / implementing other validators:"),Object(l.b)("p",null,"- You have an available list of microlibraries that implement a wide set of validators, allowing you to cherry pick the validators that you really need avoding extra weight into your application adding validators that you don't need. You can find a list of third party validators in the following ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/validators/third-party-validators"}),"link"),"."),Object(l.b)("p",null,"- You can implement your own custom validator, is quite easy, you can find instructions about how to build your own custom validation in these links: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-sync"}),"sync custom validators")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-async"}),"async custom validators"),"."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"validators/builtin-validators.mdx"}}),b.isMDXComponent=!0},yhms:function(e,t,a){e.exports=a.p+"static/min-length-57206bd0ce3cf8209e839a81f1b7155e.gif"}}]);
//# sourceMappingURL=component---validators-builtin-validators-mdx-a7acae08040b41b429fa.js.map