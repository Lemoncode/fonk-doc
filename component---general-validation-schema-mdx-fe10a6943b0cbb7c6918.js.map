{"version":3,"sources":["webpack:///../general/validation-schema.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---general-validation-schema-mdx-fe10a6943b0cbb7c6918.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"validation-schema\"\n    }}>{`Validation Schema`}</h1>\n    <p>{`A Validation Schema allows us to define in a declarative way, all the validations that apply to each field of a form plus record validations in a single place.`}</p>\n    <p>{`Let's learn how it works by following an example:`}</p>\n    <p>{`We have the following form record:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const myFormValues = {\n  product: \"shoes\",\n  discount: 5,\n  price: 20,\n  isPrime: false\n};\n`}</code></pre>\n    <p>{`And we want to set the following rules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Product must be a required field.`}</li>\n      <li parentName=\"ul\">{`Discount must be a required field.`}</li>\n      <li parentName=\"ul\">{`Price must be a required field.`}</li>\n      <li parentName=\"ul\">{`FreeShipping can be true if the total amount (price - discount) is greater than 20 USD, or if the fied `}<em parentName=\"li\">{`isPrime`}</em>{` is true. We want to trigger\nthis validation when the user hits on submit.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"defining-field-validations\"\n    }}>{`Defining field validations`}</h2>\n    <p>{`Let's start by defining a validation schema that includes the field valdiations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { createFormValidation, Validators } from \"@lemoncode/fonk\";\n\nconst validationSchema = {\n  field: {\n    product: [Validators.required.validator],\n    discount: [Validators.required.validator],\n    price: [Validators.required.validator]\n  }\n};\n\nexport const formValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`Dissecting the previous code snippet:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We have just added a section into the schema called 'field'.`}</li>\n      <li parentName=\"ul\">{`Inside 'field' object we have created new keys one per each field that\nwe want to validate (this keys have the same name as the field we want to validate).`}</li>\n      <li parentName=\"ul\">{`Each field key will contain an array indicating the fields validation to be sequentially\nexecuted when triggering a field validation or full form validation.`}</li>\n      <li parentName=\"ul\">{`Given that validation schema we create a `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#formvalidation\"\n        }}><strong parentName=\"a\">{`FormValidation`}</strong></a>{` object using the\n`}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#createformvalidation\"\n        }}><strong parentName=\"a\">{`createFormValidation`}</strong></a>{` factory method, this will allow us to call the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Lemoncode/fonk\"\n        }}><strong parentName=\"a\">{`Fonk`}</strong></a>{`\nengine to trigger a field, form or record validation associated to the `}<a parentName=\"li\" {...{\n          \"href\": \"/fonk-doc/api#validationschema\"\n        }}><strong parentName=\"a\">{`Validation Schema`}</strong></a>{`\nwe have previously created.`}</li>\n    </ul>\n    <p>{`If we want to fire a field validation we can run the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// We pass here the Id of the field to validate, and the new value for that field\nformValidation\n  .validateField(\"product\", \"my new product name\")\n  .then(validationResult => {\n    console.log(result);\n  });\n`}</code></pre>\n    <p>{`More information about Fonk `}<a parentName=\"p\" {...{\n        \"href\": \"./validating-field\"\n      }}>{`validateField`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"defining-record-validations\"\n    }}>{`Defining record validations`}</h2>\n    <p>{`Record validations are global validations that are not tied up to a given specific field, they\nare just the type of validations you want to trigger once the user hits on the submit button.`}</p>\n    <p>{`Continuing with the case we have define before, we want to define the following record validation rule:`}</p>\n    <p><em parentName=\"p\">{`Free shipping costs can only be true if user is subscribed to prime services or if the total cost\n(price - discount) is greater than 20 USD.`}</em></p>\n    <p>{`We will define here the record validator (since is custom login we will define it from scratch,\nand attach it to the Validation Schema we have created before).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import { createFormValidation, Validators } from \"@lemoncode/fonk\";\n\n+ // A record validator receives in the args an object with all the record values and optionally the custom message\n+ const freeShippingRecordValidator = ({ values }) => {\n+   const succeeded = values.isPrime || values.price - values.discount > 20;\n\n+   return {\n+     succeeded,\n+     message: succeeded\n+       ? ''\n+       : 'Subscribe to prime service or total must be greater than 20USD',\n+     type: 'RECORD_FREE_SHIPPING',\n+   };\n+ };\n\nconst validationSchema = {\n  field: {\n    product: [Validators.required.validator],\n    discount: [Validators.required.validator],\n    price: [Validators.required.validator]\n  },\n+ record: {\n+   freeShipping: [freeShippingRecordValidator],\n+ },\n};\n\nexport const formValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`Now we can fire this record validation using `}<strong parentName=\"p\">{`Fonk`}</strong>{` engine `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validaterecord\"\n      }}>{`validateRecord`}</a>{`, and this validation\nwill be triggered when we fire the `}<strong parentName=\"p\">{`Fonk`}</strong>{` engine method `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/api#validateform\"\n      }}>{`validateForm`}</a></p>\n    <p>{`If we want to fire a record validation we can run the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// We pass all the values information\nformValidation.validateRecord(myFormValues).then(recordValidationResult => {\n  console.log(result);\n});\n`}</code></pre>\n    <p>{`If we want to fire all field and form validations associaged to the form, we can run the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// We pass all the values information\nformValidation.validateForm(myFormValues).then(formValidationResult => {\n  console.log(result);\n});\n`}</code></pre>\n    <p>{`More information about Fonk `}<a parentName=\"p\" {...{\n        \"href\": \"./validating-record\"\n      }}>{`validateRecord`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"./validating-form\"\n      }}>{`validateForm`}</a>{`.`}</p>\n    <p>{`Live demos working example:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-field-record-and-form\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/validate-field-record-and-form\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/validate-field-record-and-form\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/validate-field-record-and-form\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"adding-additional-context-information\"\n    }}>{`Adding additional context information`}</h2>\n    <p>{`What happens if we need to add addional context information to the validator function, for instance passing a custom error message ? The `}<strong parentName=\"p\">{`ValidationSchema`}</strong>{` supports two signatures whenever we add a validations:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The short definition: the one we have been using, is just adding the validator function we wan to use.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validationSchema = {\n  field: {\n    product: [validators.required.validator]\n  }\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The long definition: we can create an object where we can inform the validator function, override the default error message(s) and pass custom arguments.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const validationSchema = {\n  field: {\n    product: [\n      {\n        validator: validators.required.validator,\n        message: \"My custom error message\"\n      }\n    ]\n  }\n};\n`}</code></pre>\n    <p>{`Live demos working example:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/custom-error-message\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/custom-error-message\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/custom-error-message\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/custom-error-message\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"nested-fields\"\n    }}>{`Nested fields`}</h2>\n    <p>{`In this example we have used a plain object that didn't contain any nested property.`}</p>\n    <p>{`What would happen if we have a richer object? Something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const myFormValues = {\n  product: {\n    id: 1245,\n    name: \"shoes\"\n  }\n};\n`}</code></pre>\n    <p>{`How can we add `}<em parentName=\"p\">{`product.name`}</em>{` to my validation schema? It's easy just use `}<em parentName=\"p\">{`product.name`}</em>{` as a key, surrounding it with double quotes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`const validationSchema = {\n  field: {\n-    product: [Validators.required.validator],\n+    \"product.name\": [Validators.required.validator],\n  }\n};\n`}</code></pre>\n    <p>{`Live demos working example:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/nested-field\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/nested-field\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/nested-field\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/nested-field\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"asynchronous-validations\"\n    }}>{`Asynchronous validations`}</h2>\n    <p>{`What about asynchronous validations? Under the hood `}<strong parentName=\"p\">{`fonk`}</strong>{` is fully asynchronous, you can plug an asynchronous validation directly into the validations array.`}</p>\n    <p>{`Let's create a simple login form, and as validations the user name must be required, and a valid github account (we will check against github api).`}</p>\n    <p>{`The form values we have:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const myLoginFormValues = {\n  user: \"mojombo\",\n  password: \"\"\n};\n`}</code></pre>\n    <p>{`The field validator (check `}<a parentName=\"p\" {...{\n        \"href\": \"./validators/custom-validators-async\"\n      }}>{`Custom validators asynchronous`}</a>{` for more info).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const userExistsOnGithubValidator = ({ value }) => {\n  const validationResult = {\n    type: \"GITHUB_USER_EXISTS\",\n    succeeded: false,\n    message: \"The username exists on Github\"\n  };\n\n  return fetch(\\`https://api.github.com/users/\\${value}\\`).then(response => {\n    // Status 404, User does not exists, so the given user is valid\n    // Status 200, meaning user exists, so the given user is not valid\n    return response.status === 404\n      ? {\n          ...validationResult,\n          succeeded: true,\n          message: \"\"\n        }\n      : validationResult;\n  });\n};\n`}</code></pre>\n    <p>{`How to setup a validation schema that checks if the user field is informed and is a valid\ngithub account:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { createFormValidation, Validators } from \"@lemoncode/fonk\";\n\nconst validationSchema = {\n  field: {\n    user: [Validators.required.validator, userExistsOnGithubValidator]\n  }\n};\n\nexport const formValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`Live demos working example:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/async-validator\"\n        }}>{`Plain Vanilla JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/async-validator\"\n        }}>{`Plain Vanilla TS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/async-validator\"\n        }}>{`React + React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/async-validator\"\n        }}>{`React + React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next Steps`}</h2>\n    <p>{`Now it's time to learn how to trigger a field validation, follow this `}<a parentName=\"p\" {...{\n        \"href\": \"./validating-field\"\n      }}>{`link`}</a>{` to jump into it.`}</p>\n    <h2 {...{\n      \"id\": \"appendix-validation-schema-typescript-definition\"\n    }}>{`Appendix: Validation Schema Typescript definition`}</h2>\n    <p>{`To know the exact api + model exposed, below you will find the typescript definition for\nvalidation schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface ValidationSchema {\n  field?: FieldValidationSchema;\n  record?: RecordValidationSchema;\n}\n`}</code></pre>\n    <p>{`Field Validation Schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface FieldValidationSchema {\n  [fieldId: string]: FieldValidation[];\n}\n\nexport type FieldValidation =\n  | FieldValidationFunctionSyncAsync\n  | FullFieldValidation;\n\nexport type FieldValidationFunctionSyncAsync =\n  | FieldValidationFunctionAsync\n  | FieldValidationFunctionSync;\n\nexport type FieldValidationFunctionSync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => ValidationResult;\n\nexport type FieldValidationFunctionAsync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => Promise<ValidationResult>;\n\nexport interface FullFieldValidation {\n  validator: FieldValidationFunctionSyncAsync;\n  customArgs?: any;\n  message?: string | string[];\n}\n`}</code></pre>\n    <p>{`Record:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface RecordValidationSchema {\n  [recordId: string]: RecordValidation[];\n}\n\nexport type RecordValidation =\n  | RecordValidationFunctionSyncAsync\n  | FullRecordValidation;\n\nexport type RecordValidationFunctionSyncAsync =\n  | RecordValidationFunctionSync\n  | RecordValidationFunctionAsync;\n\nexport type RecordValidationFunctionSync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => ValidationResult;\n\nexport type RecordValidationFunctionAsync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => Promise<ValidationResult>;\n\nexport interface RecordValidatorArgs {\n  values: any;\n  message?: string | string[];\n}\n\nexport interface FullRecordValidation {\n  validator: RecordValidationFunctionSyncAsync;\n  message?: string | string[];\n}\n`}</code></pre>\n    <p>{`ValidationResult:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}