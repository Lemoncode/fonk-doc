{"version":3,"sources":["webpack:///../messages/internationalization.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---messages-internationalization-mdx-ea87ccf262d64a4e7b1e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"internationalization\"\n    }}>{`Internationalization`}</h1>\n    <p>{`Check the section `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/messages/error-message\"\n      }}>{`customize error message`}</a>{` to learn the basics about how to customize your error messages.`}</p>\n    <p>{`There are serveral libraries to work with i18n, we will use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/i18next/i18next\"\n      }}>{`i18next`}</a>{` which we can define translations as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// translations.js\nexport const translations = {\n  en: {\n    required: 'Required field',\n    email: 'Not valid email address',\n  },\n  es: {\n    required: 'Debe informar el campo',\n    email: 'La dirección de email no es válida',\n  },\n};\n`}</code></pre>\n    <p>{`Create the `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import i18next from 'i18next';\nimport { translations } from './translations';\n\nexport const createI18n = language => {\n  const i18n = i18next.createInstance();\n\n  i18n.init({\n    lng: language,\n    fallbackLng: language,\n    resources: {\n      en: {\n        translation: {\n          ...translations.en,\n        },\n      },\n      es: {\n        translation: {\n          ...translations.es,\n        },\n      },\n    },\n  });\n\n  return i18n;\n};\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` instance provides the `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` method for translate your app by defined `}<inlineCode parentName=\"p\">{`keys`}</inlineCode>{` (e.g: `}<inlineCode parentName=\"p\">{`required`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` previously defined in translations):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const i18n = createI18n('en');\n\ni18n.t('required'); // Required field\n\ni18n.changeLanguage('es');\n\ni18n.t('required'); // Debe informar el campo\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: This is pseudocode due to `}<inlineCode parentName=\"p\">{`changeLanguage`}</inlineCode>{` returns a Promise.`}</p>\n    </blockquote>\n    <p>{`If we are using `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{`, we will need to use the `}<inlineCode parentName=\"p\">{`I18nextProvider`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`react-i18next`}</inlineCode>{` and even we can create a `}<inlineCode parentName=\"p\">{`LanguageContext`}</inlineCode>{` where we will provide the `}<inlineCode parentName=\"p\">{`current language`}</inlineCode>{` and a method to change the language. That is, something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\n\nexport const LanguageContext = React.createContext(null);\n`}</code></pre>\n    <p>{`Create `}<inlineCode parentName=\"p\">{`LanguageProvider`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import React from 'react';\n+ import { I18nextProvider } from 'react-i18next';\n\nexport const LanguageContext = React.createContext(null);\n\n+ export const LanguageProvider = props => {\n+   const { children } = props;\n\n+   return (\n+     <I18nextProvider i18n={}>\n+       <LanguageContext.Provider value={}>\n+         {children}\n+       </LanguageContext.Provider>\n+     </I18nextProvider>\n+   );\n+ };\n`}</code></pre>\n    <p>{`Create language state and i18n instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\n+ import { createI18n } from './i18n';\n\nexport const LanguageContext = React.createContext(null);\n\nexport const LanguageProvider = props => {\n  const { children } = props;\n+ const [language, setLanguage] = React.useState('en');\n+ const i18n = React.useMemo(() => createI18n(language), []);\n\n  return (\n-   <I18nextProvider i18n={}>\n+   <I18nextProvider i18n={i18n}>\n-     <LanguageContext.Provider value={}>\n+     <LanguageContext.Provider value={{ language }}>\n        {children}\n      </LanguageContext.Provider>\n    </I18nextProvider>\n  );\n};\n`}</code></pre>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`i18n.changeLanguage`}</inlineCode>{` when language changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\n  import { createI18n } from './i18n';\n\nexport const LanguageContext = React.createContext(null);\n\nexport const LanguageProvider = props => {\n  const { children } = props;\n  const [language, setLanguage] = React.useState('en');\n  const i18n = React.useMemo(() => createI18n(language), []);\n\n+ const handleSetLanguage = newLanguage => {\n+   i18n.changeLanguage(newLanguage);\n+   setLanguage(newLanguage);\n+ };\n\n  return (\n    <I18nextProvider i18n={i18n}>\n      <LanguageContext.Provider\n        value={{\n          language,\n+         setLanguage: handleSetLanguage,\n        }}\n      >\n        {children}\n      </LanguageContext.Provider>\n    </I18nextProvider>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"global-error-message-translation\"\n    }}>{`Global error message translation`}</h2>\n    <p>{`As we learned in previous section, we can customize error message globally using the `}<inlineCode parentName=\"p\">{`setErrorMessage`}</inlineCode>{` method provided by validators. We only need to provide the translated message when language changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\nimport { createI18n } from './i18n';\n\nconst i18n = createI18n('en');\n\nValidators.required.setErrorMessage(i18n.t('required'));\nValidators.email.setErrorMessage(i18n.t('email'));\n`}</code></pre>\n    <p>{`If we are using `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{`, we can use `}<inlineCode parentName=\"p\">{`useTranslation`}</inlineCode>{` hook and access to the `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Validators } from '@lemoncode/fonk';\nimport { useTranslation } from 'react-i18next';\n\n\nconst App = () => {\n  const { t } = useTranslation();\n  Validators.required.setErrorMessage(t('required'));\n  Validators.email.setErrorMessage(t('email'));\n  ...\n}\n`}</code></pre>\n    <p>{`Check these `}<inlineCode parentName=\"p\">{`i18next React Final Form`}</inlineCode>{` examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/react-final-form/i18n-global-message\"\n        }}>{`React React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/react-final-form/i18n-global-message\"\n        }}>{`React React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"custom-validation-schema-error-messages-translation\"\n    }}>{`Custom Validation Schema error messages translation`}</h2>\n    <p>{`This time, we will use `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` property available in `}<inlineCode parentName=\"p\">{`validationSchema`}</inlineCode>{`. Each time language selection is changed, we need to update value assigned to the message property in order to assign the new literal, we need to refresh the Form Validation instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// form-validation.js\n\nimport { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    user: [\n      {\n        validator: Validators.required.validator,\n      },\n    ],\n  },\n};\n\nexport const formValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`Provide the `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import { Validators, createFormValidation } from '@lemoncode/fonk';\n\n+ export const createValidation = t => {\n    const validationSchema = {\n      field: {\n        user: [\n          {\n            validator: Validators.required.validator,\n+           message: t('required'),\n          },\n        ],\n      },\n    };\n\n-   export const formValidation = createFormValidation(validationSchema);\n+   return createFormValidation(validationSchema);\n+ }\n\n`}</code></pre>\n    <p>{`If we are using `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{`, we can create a custom hook to create a new form validation instance when language changes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// use-validation.js\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { LanguageContext } from './i18n';\nimport { createValidation } from './form-validation';\n\nexport const useValidation = () => {\n  const { language } = React.useContext(LanguageContext);\n  const { t } = useTranslation();\n\n  const formValidation = React.useMemo(() => {\n    return createValidation(t);\n  }, [language]);\n\n  return { formValidation };\n};\n`}</code></pre>\n    <p>{`Check these `}<inlineCode parentName=\"p\">{`i18next React Final Form`}</inlineCode>{` examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/react-final-form/i18n-local-message\"\n        }}>{`React React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/react-final-form/i18n-local-message\"\n        }}>{`React React Final Form TS`}</a>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"full-implementation-global--local-validation-schema-messages\"\n    }}>{`Full implementation (global + local validation schema messages)`}</h2>\n    <p>{`We can mix both approaches:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// form-validation.js\n\nimport { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    name: [Validators.required.validator],\n    email: [Validators.required.validator, Validators.email.validator],\n  },\n};\n\nexport const formValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`Add local translations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import { Validators, createFormValidation } from '@lemoncode/fonk';\n\n+ export const createValidation = t => {\n    const validationSchema = {\n      field: {\n        name: [Validators.required.validator],\n        email: [\n          Validators.required.validator,\n-         Validators.email.validator\n+         {\n+           validator: Validators.email.validator,\n+           message: t('email'),\n+         },\n        ],\n      },\n    };\n\n-   export const formValidation = createFormValidation(validationSchema);\n+   return createFormValidation(validationSchema);\n+ }\n`}</code></pre>\n    <p>{`Add global translations:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nexport const createValidation = t => {\n+ Validators.required.setErrorMessage(t('required'));\n\n  const validationSchema = {\n    field: {\n      name: [Validators.required.validator],\n      email: [\n        Validators.required.validator,\n        {\n          validator: Validators.email.validator,\n          message: t('email'),\n        },\n      ],\n    },\n  };\n\n  return createFormValidation(validationSchema);\n};\n\n`}</code></pre>\n    <p>{`Check these `}<inlineCode parentName=\"p\">{`i18next React Final Form`}</inlineCode>{` examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/js/react-final-form/i18n-full-example\"\n        }}>{`React React Final Form JS`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/messages/ts/react-final-form/i18n-full-example\"\n        }}>{`React React Final Form TS`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}