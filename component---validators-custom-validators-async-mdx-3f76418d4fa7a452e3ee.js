(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"3Zug":function(e,a,t){e.exports=t.p+"static/async-validator-04bec2a4817d277fbe5059a6a969ee82.gif"},Xz34:function(e,a,t){e.exports=t.p+"static/async-record-validator-f990b733ddffc318db73b8a4f63db62c.gif"},e7VM:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return i})),t.d(a,"default",(function(){return c}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var n=t("/FXl"),s=t("TjRS");t("aD51");function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"validators/custom-validators-async.mdx"}});var l={_frontmatter:i},o=s.a;function c(e){var a=e.components,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,["components"]);return Object(n.b)(o,r({},l,s,{components:a,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"custom-validators-asynchronous"},"Custom validators asynchronous"),Object(n.b)("p",null,"In some scenarios you need to implement async validations, that's it a validation that won't return the result straight forward, for instance\na validation that need to make a request to a rest-api and cannot provide the result until it gets the response from server."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Prior to learn about async validations, take your time and learn how to deal with ",Object(n.b)("a",r({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-sync"}),"synchronous validations")," there are various topics\ncommon to both validators that are explained in the previous topic section.")),Object(n.b)("h2",{id:"async-field-validator"},"Async Field Validator"),Object(n.b)("p",null,"An async field validator is just a funcion that expects an argument (this argument is an object that contains several fields),\nand returns a promise that will contain a validation result once resolved."),Object(n.b)("p",null,"Depending on the use case (e.g. is hitting a global rest api or a given domain specific rest api), it could be reusable or not."),Object(n.b)("h3",{id:"disecting-an-async-validators"},"Disecting an async validators"),Object(n.b)("p",null,"The definition of an asynchronous field validator:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"FieldValidationArgs"),": This is passed as a single argument in the validator",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"value"),": current field value."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"values"),": form / record values (all fields)."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"customArgs"),": we can pass custom arguments to our validator, this allow us to create flexible and configurable\nvalidators (e.g. in a min-lenght validator we can pass as customArgument a number indicating the minlenght allowed,\nor if we have a password / repeat password validator we can pass the id of the password field to the repeat password\nfield)."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"message"),": you can override here the error message that the validator returns in case of failure. You can inject\nin a message ",Object(n.b)("em",{parentName:"li"},"parameters")," to be interpolated by the validator (e.g. 'string must be at least {{minlength}}'),\nin some validators there may be more than one error message defined, in that case we can pass an array of strings."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Promise<ValidationResult",">"),": once the validator has been executed it returns a ",Object(n.b)("em",{parentName:"li"},"Promise<ValidationResult",">"),",\nonce the promise gets resolved:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"If the validation succeeds, you get as return value a ",Object(n.b)("em",{parentName:"li"},"ValidationResult")," where it's field ",Object(n.b)("em",{parentName:"li"},"succeeded")," is true."),Object(n.b)("li",{parentName:"ul"},"If the validation fails, you get as return value a ",Object(n.b)("em",{parentName:"li"},"ValidationResult")," where it's field ",Object(n.b)("em",{parentName:"li"},"succeeded")," is false,\na ",Object(n.b)("em",{parentName:"li"},"message")," where you get the error message (user friendly) and a ",Object(n.b)("em",{parentName:"li"},"type")," field that indicates the validator that\nfailed.")))))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-typescript"}),"export interface FieldValidatorArgs {\n  value: any;\n  values?: any;\n  customArgs?: any;\n  message?: string | string[];\n}\n\nexport interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string;\n}\n\nexport type FieldValidationFunctionAsync = (\n  fieldValidatorArgs: FieldValidatorArgs\n) => Promise<ValidationResult>;\n")),Object(n.b)("h3",{id:"learning-by-example"},"Learning by Example"),Object(n.b)("p",null,"The best way to learn how to implementing an async validator is just by doing it so."),Object(n.b)("p",null,"Let's get started , we have a signup field and we ask the user to enter a new user id,\nthis user Id has to be new, it cannot exists in our system (in this case we will\ncheck that the userId does not exists in github using the Github rest api)."),Object(n.b)("p",null,"We will start simple, in order to check we only need use the ",Object(n.b)("em",{parentName:"p"},"value")," we\ndon't need the rest of optional params: ",Object(n.b)("em",{parentName:"p"},"values"),", ",Object(n.b)("em",{parentName:"p"},"customArgs"),", ",Object(n.b)("em",{parentName:"p"},"message"),", we will follow a TDD like approach\nwe will create the validator always failing (returning a failed validation result)."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"const validatorType = 'GITHUB_USER_EXISTS';\n\nexport const myValidator = fieldValidatorArgs => {\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message: 'The username exists on Github',\n  };\n\n  return Promise.resolve(validationResult);\n};\n")),Object(n.b)("p",null,"Cool, we got a validator that always fails, now is time to inject our logic; we just want\nto validate that the login Id doesn't exists on Github."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-diff"}),"const validatorType = 'GITHUB_USER_EXISTS';\n\nexport const myValidator = fieldValidatorArgs => {\n+ const { value } = fieldValidatorArgs;\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n    message: 'The username exists on Github',\n  };\n\n- return Promise.resolve(validationResult);\n+ return fetch(`https://api.github.com/users/${value}`).then(response => {\n+   // Status 404, User does not exists, so the given user is valid\n+   // Status 200, meaning user exists, so the given user is not valid\n+   return response.status === 404\n+     ? {\n+         ...validationResult,\n+         succeeded: true,\n+         message: '',\n+       }\n+     : validationResult;\n+ });\n};\n\n")),Object(n.b)("p",null,"Let's add some additional changes to allow the error message to be customized (you can check an step by step guided solution\nin the ",Object(n.b)("a",r({parentName:"p"},{href:"/fonk-doc/validators/custom-validators-sync"}),"synchronous validation section"),")."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-diff"}),"const validatorType = 'GITHUB_USER_EXISTS';\n\n+ let defaultMessage = 'The username exists on Github';\n+ export const setErrorMessage = message => (defaultMessage = message);\n\nexport const myValidator = fieldValidatorArgs => {\n- const { value } = fieldValidatorArgs;\n+ const { value, message = defaultMessage } = fieldValidatorArgs;\n\n  const validationResult = {\n    succeeded: false,\n    type: validatorType,\n-   message: 'The username exists on Github',\n+   message,\n  };\n\n  return fetch(`https://api.github.com/users/${value}`).then(response => {\n    // Status 404, User does not exists, so the given user is valid\n    // Status 200, meaning user exists, so the given user is not valid\n    return response.status === 404\n      ? {\n          ...validationResult,\n          succeeded: true,\n          message: '',\n        }\n      : validationResult;\n  });\n};\n\n")),Object(n.b)("p",null,Object(n.b)("img",{alt:"async-validator",src:t("3Zug")})),Object(n.b)("p",null,"Check here:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/async-validator"}),"Plain Vanilla JS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/async-validator"}),"Plain Vanilla TS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/async-validator"}),"React + React Final Form JS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/ts/async-validator"}),"React + React Final Form TS"),".")),Object(n.b)("h2",{id:"asynchronous-record-validator"},"Asynchronous Record Validator"),Object(n.b)("p",null,"An asynchronous record validator is a validation that is not tied up to an specific field, is usually something that we trigger\nwhen the user hits submit, and previous to send the information to the server."),Object(n.b)("p",null,"Record validations usually are not highly reusable functions, they are tied up to the domain of the form to be evaluated."),Object(n.b)("h3",{id:"disecting-a-record-validator"},"Disecting a record validator"),Object(n.b)("p",null,"The definition of an asynchronous record validation:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"RecordValidationArgs"),": This is passed as a single argument in the validator.",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"values"),": form / record values (all fields)."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"message"),": you can override here the error message that the validator returns in case of failure. You can inject\nin a message ",Object(n.b)("em",{parentName:"li"},"parameters")," to be interpolated by the validator (e.g. 'string must be at least {{minlength}}'),\nin some validators there may be more than one error message defined, in that case we can pass an array of strings."))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"Promise<ValidationResult",">"),": once the validator has been executed it returns a ",Object(n.b)("em",{parentName:"li"},"Promise<ValidationResult",">"),",\nonce the promise gets resolved:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"If the validation succeeds, you get as return value a ",Object(n.b)("em",{parentName:"li"},"ValidationResult")," where it's field ",Object(n.b)("em",{parentName:"li"},"succeeded")," is true."),Object(n.b)("li",{parentName:"ul"},"If the validation fails, you get as return value a ",Object(n.b)("em",{parentName:"li"},"ValidationResult")," where it's field ",Object(n.b)("em",{parentName:"li"},"succeeded")," is false,\na ",Object(n.b)("em",{parentName:"li"},"message")," where you get the error message (user friendly) and a ",Object(n.b)("em",{parentName:"li"},"type")," field that indicates the validator that\nfailed.")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-typescript"}),"export interface RecordValidatorArgs {\n  values: any;\n  message?: string | string[];\n}\n\nexport interface ValidationResult {\n  type: string;\n  succeeded: boolean;\n  message: string;\n}\n\nexport type RecordValidationFunctionAsync = (\n  recordValidatorArgs: RecordValidatorArgs\n) => Promise<ValidationResult>;\n")),Object(n.b)("h3",{id:"learning-by-example-1"},"Learning by Example"),Object(n.b)("p",null,"We have the following scenario: a third party rest-api where we can submit requests: this request will be queued up and it could take minutes or hours to get resolved\n(prior to process data this api's will check against a local database in real time in order to check if the information submitted is correct)."),Object(n.b)("p",null,"This could impact in a severe way to the usability of the application, our backend developers have decided to implement system that will hit a cache, and provide\na real time response that in 90% of the case will be accurate (or at least will trap 90% of the user form errors)."),Object(n.b)("p",null,"The model of the form that we want to manage is:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"interface Process {\n  name: string;\n  cachedResult: string;\n}\n")),Object(n.b)("p",null,"The server validation call will have the following signature (we will emulate it in our example)."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"const resolveProcess = (): Promise<string> => {\n  const time = Math.random() * 1000;\n  return time <= 900 ? '✅' : '❌';\n};\n")),Object(n.b)("p",null,"The validator that we will implement:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"import { resolveProcessFromBackend } from './api';\n\nexport const processValidator = ({ values }) =>\n  resolveProcessFromBackend().then(data => {\n    const succeeded = values.cachedResult === data;\n    return {\n      succeeded,\n      message: succeeded\n        ? ''\n        : `Please, review the process. The real result was ${data}`,\n      type: 'RECORD_PROCESS',\n    };\n  });\n")),Object(n.b)("p",null,Object(n.b)("img",{alt:"async-record-validator",src:t("Xz34")})),Object(n.b)("p",null,"Check here:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/js/vanilla/async-record-validator"}),"Plain Vanilla JS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/ts/vanilla/async-record-validator"}),"Plain Vanilla TS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/js/react-final-form/async-record-validator"}),"React + React Final Form JS"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/docs/validators/ts/react-final-form/async-record-validator"}),"React + React Final Form TS"),".")),Object(n.b)("h3",{id:"next-steps"},"Next steps"),Object(n.b)("p",null,"You have successfully completed the custom validators module."),Object(n.b)("p",null,"You can choose wether to jump into ",Object(n.b)("a",r({parentName:"p"},{href:"/fonk-doc/react-final-form"}),"React Final Forms Integration"),"."),Object(n.b)("p",null,"Or ",Object(n.b)("a",r({parentName:"p"},{href:"/fonk-doc/messages/internationalization"}),"internationalization")))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"validators/custom-validators-async.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---validators-custom-validators-async-mdx-3f76418d4fa7a452e3ee.js.map