{"version":3,"sources":["webpack:///../validators/validators.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+bAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,qBAAG,sBAAQC,WAAW,KAAnB,QAAH,8CAA0F,sBAAQA,WAAW,KAAnB,eAC1F,8YAMA,8GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8gCA+BL,8BACE,iBAAGA,WAAW,cAAd,gHAGF,8DACA,sBACE,kBAAIA,WAAW,MAAf,qDACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,qCACA,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,8GAGF,2CACA,sBACE,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,kBAEF,mDACA,sBACE,kBAAIA,WAAW,MAAf,mBACA,kBAAIA,WAAW,MAAf,qBAEF,sCACA,sBACE,kBAAIA,WAAW,MAAf,4CAAiE,mBAAGA,WAAW,MAAS,CACpF,KAAQ,sCACP,sBAAQA,WAAW,KAAnB,SAFL,8DAGA,kBAAIA,WAAW,MAAf,qJACA,kBAAIA,WAAW,MAAf,yLAGF,+GAA8F,sBAAQA,WAAW,KAAnB,QAA9F,4BACqB,mBAAGA,WAAW,KAAQ,CACvC,KAAQ,4CADS,QADrB,qB,kMAQJJ,EAAWK,gBAAiB","file":"component---validators-validators-mdx-4c3d7c7d1cc4eb05098d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"validators\"\n    }}>{`Validators`}</h1>\n    <p><strong parentName=\"p\">{`Fonk`}</strong>{` isolated field and record validation into `}<strong parentName=\"p\">{`Validators`}</strong></p>\n    <p>{`A validator is a function, that given an input (for instance, field name,\nfieldvalue), check for a give business rule (e.g. is field a valid\nemail, or has been field informed), and depending on the success or not\nof that validation it returns a succeed output, or a fail one (including\nadditional context information like the error message or validation\ntype applied).`}</p>\n    <p>{`For instance let's create a validator that check if a field contains no blank spaces:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const VALIDATOR_TYPE = 'NO_SPACES';\n\nlet defaultMessage = 'String cannot contain white spaces';\nexport const setErrorMessage = message => (defaultMessage = message);\n\nexport const validator = (fieldValidatorArgs) => {\n  const {\n      value,\n      // Just if we want to override the default error message\n      message = defaultMessage,\n    } = fieldValidatorArgs;\n\n    // If the field is not informed, just return succeeded, this\n    // case should be handle before by the required validator\n    const succeeded = !value || (typeof value === 'string' && value === value.trim());\n\n   // Return ValidationResultStructure\n   // ValidationSucceeded: true / false\n   // message: error message (string) can be overriden\n   // type: type of validation executed (in this case NO_SPACES)\n   // In this case we directly return data (sync validator),\n   // we can return promises as well (async validator)\n  return {\n    succeeded,\n    message: succeeded ? '' : (message as string),\n    type: VALIDATOR_TYPE,\n  };\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You can use typescript to build this validator, validators typings definitions\nare exposed by the library.`}</p>\n    </blockquote>\n    <p>{`What are the advantage of Validators?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We just isolates validation in a single function.`}</li>\n      <li parentName=\"ul\">{`These functions can be easily reused.`}</li>\n      <li parentName=\"ul\">{`These functions be easily tested.`}</li>\n      <li parentName=\"ul\">{`These functions do one thing and only one thing.`}</li>\n      <li parentName=\"ul\">{`We can create microlibraries for validators and cherry pick the ones that\nwe really need in our project.`}</li>\n    </ul>\n    <p>{`Validators can be:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Synchronous.`}</li>\n      <li parentName=\"ul\">{`Asynchronous.`}</li>\n    </ul>\n    <p>{`Validators can be defined:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`At field level:`}</li>\n      <li parentName=\"ul\">{`At record level:`}</li>\n    </ul>\n    <p>{`You can find:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A set of built-in validators in the core `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/Lemoncode/fonk\"\n        }}><strong parentName=\"a\">{`Fonk`}</strong></a>{` library (required, minLength, maxLength, pattern, email).`}</li>\n      <li parentName=\"ul\">{`A list of microlibraries available with a range set of validators already implemented (just install the ones that you need, like a buffet style).`}</li>\n      <li parentName=\"ul\">{`If any of the built-in validators doesn't match your needs, you can build your own custom validator, and\neven publish it as a microlibrary to spread the OSS love around the world.`}</li>\n    </ul>\n    <p>{`Enough theory, let's get started learning how to use the validators that already ships `}<strong parentName=\"p\">{`Fonk`}</strong>{`\nlibrary, click on this `}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validators/builtin-validators\"\n      }}>{`link`}</a>{` to get started.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}