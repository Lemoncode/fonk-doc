{"version":3,"sources":["webpack:///../gifs/validate-field.gif","webpack:///../general/getting-started.mdx"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---general-getting-started-mdx-da13bd321bf881876e7b.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/validate-field-300ebc8e4a500a9c58e8e7b07d4f331f.gif\";","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/circleci/test-ci-code/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <p>{`Getting started with `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Lemoncode/fonk\"\n      }}><strong parentName=\"a\">{`Fonk`}</strong></a>{` is something really easy and quick. First of all you will need to install `}<strong parentName=\"p\">{`Fonk`}</strong>{` in your existing project using your favorite package manager (we'll assume npm for this example).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lemoncode/fonk --save\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Fonk`}</strong>{` is Typescript friendly, typing definitions are already included in the main package.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"using\"\n    }}>{`Using`}</h2>\n    <p>{`Fonk is framework agnostic, it just works out of the box (no dependencies).`}</p>\n    <p>{`We are going to start by adding some lines of code to define a login validation record:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const loginRecord = {\n  user: '',\n  password: '',\n};\n`}</code></pre>\n    <p>{`Now we are going to define the following validation schema for this form:`}</p>\n    <p>{`- `}<strong parentName=\"p\">{`User field`}</strong>{` is a required field.`}</p>\n    <p>{`- `}<strong parentName=\"p\">{`Password`}</strong>{` field is a required field.`}</p>\n    <p>{`Let's get started with Fonk, it is time to create the validation schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { Validators, createFormValidation } from '@lemoncode/fonk';\n\nconst validationSchema = {\n  field: {\n    user: [Validators.required.validator],\n    password: [Validators.required.validator],\n  },\n};\n\nconst formValidation = createFormValidation(validationSchema);\n`}</code></pre>\n    <p>{`And let's fire a field validation (usually we will fire this in the `}<em parentName=\"p\">{`onChange`}</em>{` or `}<em parentName=\"p\">{`onBlur`}</em>{` event of every HTML field):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`formValidation\n  .validateField('user', loginRecord.user)\n  .then(validationResult => {\n    console.log(validationResult);\n  });\n`}</code></pre>\n    <p>{`Since the record field user is empty, we will get the following output from the `}<em parentName=\"p\">{`console.log(validationResult)`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`{\n  succeeded: false,\n  message: \"Please fill in this mandatory field.\",\n  type: \"REQUIRED\"\n}\n`}</code></pre>\n    <p>{`What happens if we feed the login.user field with data?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`loginRecord.user = 'John';\n`}</code></pre>\n    <p>{`And we fire again the field validation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`formValidation\n  .validateField('user', loginRecord.user)\n  .then(validationResult => {\n    console.log(validationResult);\n  });\n`}</code></pre>\n    <p>{`We get the following result (validation succeeded):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`{\n  succeeded: true,\n  message: \"\",\n  type: \"REQUIRED\"\n}\n`}</code></pre>\n    <p>{`If you want to fire all the form validations in one go, you can execute `}<em parentName=\"p\">{`validateForm`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`formValidation.validateForm(loginRecord).then(validationResult => {\n  console.log(validationResult);\n});\n`}</code></pre>\n    <p>{`And you will get the result of firing all defined validations in the schema (in this case `}<em parentName=\"p\">{`user`}</em>{` has been\nalready informed and `}<em parentName=\"p\">{`password`}</em>{` field is empty):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`{\n  succeeded: false,\n  fieldErrors: {\n    user: {\n      succeeded: true,\n      message: \"\",\n      type: \"REQUIRED\"\n    },\n    password: {\n      succeeded: false,\n      message: \"Please fill in this mandatory field.\",\n      type: \"REQUIRED\"\n    },\n  },\n  recordErrors: {}\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ui-examples\"\n    }}>{`UI Examples`}</h2>\n    <p><img alt=\"validate-field\" src={require(\"../gifs/validate-field.gif\")} /></p>\n    <p>{`You can play with this example in the following sandbox `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-field\"\n      }}>{`validate-field js`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-form\"\n      }}>{`validate-form js`}</a>{`.`}</p>\n    <p>{`Typescript version: `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/validate-field\"\n      }}>{`validate-field ts`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/ts/validate-form\"\n      }}>{`validate-form ts`}</a></p>\n    <p>{`If you want to check a full example including user interface interaction, check the following sandboxes:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Plain vanilla js example: `}<a parentName=\"p\" {...{\n            \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-field\"\n          }}>{`https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/vanilla/js/validate-field`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`React + React Final Form: `}<a parentName=\"p\" {...{\n            \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/validate-field\"\n          }}>{`https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/react-final-form/js/validate-field`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`React + Formik: `}<a parentName=\"p\" {...{\n            \"href\": \"https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/formik/js/basic\"\n          }}>{`https://codesandbox.io/s/github/lemoncode/fonk/tree/master/examples/formik/js/basic`}</a></p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`Now many questions will be arising in your head:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Can I define more than one field validation per field?`}</li>\n      <li parentName=\"ul\">{`Where can I find more validations already implemented? (we call this `}<em parentName=\"li\">{`validators`}</em>{`).`}</li>\n      <li parentName=\"ul\">{`How can I create my custom `}<em parentName=\"li\">{`validator`}</em>{`?`}</li>\n      <li parentName=\"ul\">{`What about asynchronous validations?`}</li>\n      <li parentName=\"ul\">{`And global form validations?(we call them record level validations).`}</li>\n      <li parentName=\"ul\">{`Does it integrate well with libraries like React Final Form?`}</li>\n      <li parentName=\"ul\">{`What about multilanguage support?`}</li>\n    </ul>\n    <p>{`All this cases are covered by the library, let's jump into the next topic\n`}<a parentName=\"p\" {...{\n        \"href\": \"/fonk-doc/validation-schema\"\n      }}>{`Validation Schema`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}